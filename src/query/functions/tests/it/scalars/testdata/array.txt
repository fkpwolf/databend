ast            : []
raw expr       : array()
checked expr   : array<>()
optimized expr : [] :: Array(Nothing)
output type    : Array(Nothing)
output domain  : []
output         : []


ast            : [NULL, 8, -10]
raw expr       : array(NULL, 8_u8, minus(10_u8))
checked expr   : array<T0=Int16 NULL><T0, T0, T0>(CAST(NULL AS Int16 NULL), CAST(8_u8 AS Int16 NULL), CAST(minus<UInt8>(10_u8) AS Int16 NULL))
optimized expr : [NULL, 8_i16, -10_i16]
output type    : Array(Int16 NULL)
output domain  : [{-10..=8} ∪ {NULL}]
output         : [NULL, 8_i16, -10_i16]


ast            : [['a', 'b'], []]
raw expr       : array(array("a", "b"), array())
checked expr   : array<T0=Array(String)><T0, T0>(array<T0=String><T0, T0>("a", "b"), CAST(array<>() AS Array(String)))
optimized expr : [["a", "b"], []]
output type    : Array(Array(String))
output domain  : [[{"a"..="b"}]]
output         : [["a", "b"], []]


ast            : ['a', 1, parse_json('{"foo":"bar"}')]
raw expr       : array("a", 1_u8, parse_json("{\"foo\":\"bar\"}"))
checked expr   : array<T0=Variant><T0, T0, T0>(to_variant<T0=String><T0>("a"), to_variant<T0=UInt8><T0>(1_u8), parse_json<String>("{\"foo\":\"bar\"}"))
optimized expr : ["a", 1, {"foo":"bar"}]
output type    : Array(Variant)
output domain  : [Undefined]
output         : ["a", 1, {"foo":"bar"}]


ast            : [parse_json('[]'), parse_json('{"foo":"bar"}')]
raw expr       : array(parse_json("[]"), parse_json("{\"foo\":\"bar\"}"))
checked expr   : array<T0=Variant><T0, T0>(parse_json<String>("[]"), parse_json<String>("{\"foo\":\"bar\"}"))
optimized expr : [[], {"foo":"bar"}]
output type    : Array(Variant)
output domain  : [Undefined]
output         : [[], {"foo":"bar"}]


ast            : length([])
raw expr       : length(array())
checked expr   : length<Array(Nothing)>(array<>())
optimized expr : 0_u8
output type    : UInt8
output domain  : {0..=0}
output         : 0_u8


ast            : length([1, 2, 3])
raw expr       : length(array(1_u8, 2_u8, 3_u8))
checked expr   : length<T0=UInt8><Array(T0)>(array<T0=UInt8><T0, T0, T0>(1_u8, 2_u8, 3_u8))
optimized expr : 3_u64
output type    : UInt64
output domain  : {3..=3}
output         : 3_u64


ast            : length([true, false])
raw expr       : length(array(true, false))
checked expr   : length<T0=Boolean><Array(T0)>(array<T0=Boolean><T0, T0>(true, false))
optimized expr : 2_u64
output type    : UInt64
output domain  : {2..=2}
output         : 2_u64


ast            : length(['a', 'b', 'c', 'd'])
raw expr       : length(array("a", "b", "c", "d"))
checked expr   : length<T0=String><Array(T0)>(array<T0=String><T0, T0, T0, T0>("a", "b", "c", "d"))
optimized expr : 4_u64
output type    : UInt64
output domain  : {4..=4}
output         : 4_u64


error: 
  --> SQL:1:7
  |
1 | [1, 2]['a']
  |       ^^^^^ no overload satisfies `get(Array(UInt8), String)`

has tried possible overloads:
  get(Array(Nothing) NULL, UInt64 NULL) :: NULL     : unable to unify `Array(UInt8)` with `Array(Nothing)`
  get(Array(T0 NULL), UInt64) :: T0 NULL            : unable to unify `String` with `UInt64`
  get(Array(T0 NULL) NULL, UInt64 NULL) :: T0 NULL  : unable to unify `String` with `UInt64`
  get(Array(T0), UInt64) :: T0 NULL                 : unable to unify `String` with `UInt64`
  get(Array(T0) NULL, UInt64 NULL) :: T0 NULL       : unable to unify `String` with `UInt64`
  get(Variant NULL, UInt64 NULL) :: Variant NULL    : unable to unify `Array(UInt8)` with `Variant`
  get(Variant NULL, String NULL) :: Variant NULL    : unable to unify `Array(UInt8)` with `Variant`



ast            : [][1]
raw expr       : get(array(), 1_u8)
checked expr   : get<Array(Nothing) NULL, UInt64 NULL>(CAST(array<>() AS Array(Nothing) NULL), CAST(1_u8 AS UInt64 NULL))
optimized expr : NULL
output type    : NULL
output domain  : {NULL}
output         : NULL


ast            : [][NULL]
raw expr       : get(array(), NULL)
checked expr   : get<Array(Nothing) NULL, UInt64 NULL>(CAST(array<>() AS Array(Nothing) NULL), CAST(NULL AS UInt64 NULL))
optimized expr : NULL
output type    : NULL
output domain  : {NULL}
output         : NULL


ast            : [true, false][1]
raw expr       : get(array(true, false), 1_u8)
checked expr   : get<T0=Boolean><Array(T0 NULL), UInt64>(CAST(array<T0=Boolean><T0, T0>(true, false) AS Array(Boolean NULL)), to_uint64<UInt8>(1_u8))
optimized expr : true
output type    : Boolean NULL
output domain  : {TRUE}
output         : true


ast            : ['a', 'b', 'c'][2]
raw expr       : get(array("a", "b", "c"), 2_u8)
checked expr   : get<T0=String><Array(T0 NULL), UInt64>(CAST(array<T0=String><T0, T0, T0>("a", "b", "c") AS Array(String NULL)), to_uint64<UInt8>(2_u8))
optimized expr : "b"
output type    : String NULL
output domain  : {"b"..="b"}
output         : "b"


ast            : [1, 2, 3][1]
raw expr       : get(array(1_u8, 2_u8, 3_u8), 1_u8)
checked expr   : get<T0=UInt8><Array(T0 NULL), UInt64>(CAST(array<T0=UInt8><T0, T0, T0>(1_u8, 2_u8, 3_u8) AS Array(UInt8 NULL)), to_uint64<UInt8>(1_u8))
optimized expr : 1_u8
output type    : UInt8 NULL
output domain  : {1..=1}
output         : 1_u8


ast            : [1, 2, 3][3]
raw expr       : get(array(1_u8, 2_u8, 3_u8), 3_u8)
checked expr   : get<T0=UInt8><Array(T0 NULL), UInt64>(CAST(array<T0=UInt8><T0, T0, T0>(1_u8, 2_u8, 3_u8) AS Array(UInt8 NULL)), to_uint64<UInt8>(3_u8))
optimized expr : 3_u8
output type    : UInt8 NULL
output domain  : {3..=3}
output         : 3_u8


ast            : [1, null, 3][1]
raw expr       : get(array(1_u8, NULL, 3_u8), 1_u8)
checked expr   : get<T0=UInt8><Array(T0 NULL), UInt64>(array<T0=UInt8 NULL><T0, T0, T0>(CAST(1_u8 AS UInt8 NULL), CAST(NULL AS UInt8 NULL), CAST(3_u8 AS UInt8 NULL)), to_uint64<UInt8>(1_u8))
optimized expr : 1_u8
output type    : UInt8 NULL
output domain  : {1..=1}
output         : 1_u8


ast            : [1, null, 3][2]
raw expr       : get(array(1_u8, NULL, 3_u8), 2_u8)
checked expr   : get<T0=UInt8><Array(T0 NULL), UInt64>(array<T0=UInt8 NULL><T0, T0, T0>(CAST(1_u8 AS UInt8 NULL), CAST(NULL AS UInt8 NULL), CAST(3_u8 AS UInt8 NULL)), to_uint64<UInt8>(2_u8))
optimized expr : NULL
output type    : UInt8 NULL
output domain  : {NULL}
output         : NULL


ast            : [1, 2, 3][4]
raw expr       : get(array(1_u8, 2_u8, 3_u8), 4_u8)
checked expr   : get<T0=UInt8><Array(T0 NULL), UInt64>(CAST(array<T0=UInt8><T0, T0, T0>(1_u8, 2_u8, 3_u8) AS Array(UInt8 NULL)), to_uint64<UInt8>(4_u8))
optimized expr : NULL
output type    : UInt8 NULL
output domain  : {NULL}
output         : NULL


ast            : [a, b][idx]
raw expr       : get(array(a::Int16, b::Int16), idx::UInt16)
checked expr   : get<T0=Int16><Array(T0 NULL), UInt64>(CAST(array<T0=Int16><T0, T0>(a, b) AS Array(Int16 NULL)), to_uint64<UInt16>(idx))
evaluation:
+--------+---------+---------+---------+------------------+
|        | a       | b       | idx     | Output           |
+--------+---------+---------+---------+------------------+
| Type   | Int16   | Int16   | UInt16  | Int16 NULL       |
| Domain | {0..=2} | {3..=5} | {1..=3} | {0..=5} ∪ {NULL} |
| Row 0  | 0_i16   | 3_i16   | 1_u16   | 0_i16            |
| Row 1  | 1_i16   | 4_i16   | 2_u16   | 4_i16            |
| Row 2  | 2_i16   | 5_i16   | 3_u16   | NULL             |
+--------+---------+---------+---------+------------------+
evaluation (internal):
+--------+---------------------------------------------------------------------+
| Column | Data                                                                |
+--------+---------------------------------------------------------------------+
| a      | Int16([0, 1, 2])                                                    |
| b      | Int16([3, 4, 5])                                                    |
| idx    | UInt16([1, 2, 3])                                                   |
| Output | NullableColumn { column: Int16([0, 4, 0]), validity: [0b_____011] } |
+--------+---------------------------------------------------------------------+


ast            : slice([], 1, 2)
raw expr       : slice(array(), 1_u8, 2_u8)
checked expr   : slice<Array(Nothing), UInt64, UInt64>(array<>(), to_uint64<UInt8>(1_u8), to_uint64<UInt8>(2_u8))
optimized expr : [] :: Array(Nothing)
output type    : Array(Nothing)
output domain  : []
output         : []


ast            : slice([1], 1, 2)
raw expr       : slice(array(1_u8), 1_u8, 2_u8)
checked expr   : slice<T0=UInt8><Array(T0), UInt64, UInt64>(array<T0=UInt8><T0>(1_u8), to_uint64<UInt8>(1_u8), to_uint64<UInt8>(2_u8))
optimized expr : [1_u8]
output type    : Array(UInt8)
output domain  : [{1..=1}]
output         : [1_u8]


ast            : slice([NULL, 1, 2, 3], 0, 2)
raw expr       : slice(array(NULL, 1_u8, 2_u8, 3_u8), 0_u8, 2_u8)
checked expr   : slice<T0=UInt8 NULL><Array(T0), UInt64, UInt64>(array<T0=UInt8 NULL><T0, T0, T0, T0>(CAST(NULL AS UInt8 NULL), CAST(1_u8 AS UInt8 NULL), CAST(2_u8 AS UInt8 NULL), CAST(3_u8 AS UInt8 NULL)), to_uint64<UInt8>(0_u8), to_uint64<UInt8>(2_u8))
optimized expr : [NULL, 1_u8]
output type    : Array(UInt8 NULL)
output domain  : [{0..=1} ∪ {NULL}]
output         : [NULL, 1_u8]


ast            : slice([0, 1, 2, 3], 1, 2)
raw expr       : slice(array(0_u8, 1_u8, 2_u8, 3_u8), 1_u8, 2_u8)
checked expr   : slice<T0=UInt8><Array(T0), UInt64, UInt64>(array<T0=UInt8><T0, T0, T0, T0>(0_u8, 1_u8, 2_u8, 3_u8), to_uint64<UInt8>(1_u8), to_uint64<UInt8>(2_u8))
optimized expr : [0_u8, 1_u8]
output type    : Array(UInt8)
output domain  : [{0..=1}]
output         : [0_u8, 1_u8]


ast            : slice([0, 1, 2, 3], 1, 5)
raw expr       : slice(array(0_u8, 1_u8, 2_u8, 3_u8), 1_u8, 5_u8)
checked expr   : slice<T0=UInt8><Array(T0), UInt64, UInt64>(array<T0=UInt8><T0, T0, T0, T0>(0_u8, 1_u8, 2_u8, 3_u8), to_uint64<UInt8>(1_u8), to_uint64<UInt8>(5_u8))
optimized expr : [0_u8, 1_u8, 2_u8, 3_u8]
output type    : Array(UInt8)
output domain  : [{0..=3}]
output         : [0_u8, 1_u8, 2_u8, 3_u8]


ast            : slice(['a', 'b', 'c', 'd'], 0, 2)
raw expr       : slice(array("a", "b", "c", "d"), 0_u8, 2_u8)
checked expr   : slice<T0=String><Array(T0), UInt64, UInt64>(array<T0=String><T0, T0, T0, T0>("a", "b", "c", "d"), to_uint64<UInt8>(0_u8), to_uint64<UInt8>(2_u8))
optimized expr : ["a", "b"]
output type    : Array(String)
output domain  : [{"a"..="b"}]
output         : ["a", "b"]


ast            : slice(['a', 'b', 'c', 'd'], 1, 4)
raw expr       : slice(array("a", "b", "c", "d"), 1_u8, 4_u8)
checked expr   : slice<T0=String><Array(T0), UInt64, UInt64>(array<T0=String><T0, T0, T0, T0>("a", "b", "c", "d"), to_uint64<UInt8>(1_u8), to_uint64<UInt8>(4_u8))
optimized expr : ["a", "b", "c", "d"]
output type    : Array(String)
output domain  : [{"a"..="d"}]
output         : ["a", "b", "c", "d"]


ast            : slice(['a', 'b', 'c', 'd'], 2, 6)
raw expr       : slice(array("a", "b", "c", "d"), 2_u8, 6_u8)
checked expr   : slice<T0=String><Array(T0), UInt64, UInt64>(array<T0=String><T0, T0, T0, T0>("a", "b", "c", "d"), to_uint64<UInt8>(2_u8), to_uint64<UInt8>(6_u8))
optimized expr : ["b", "c", "d"]
output type    : Array(String)
output domain  : [{"b"..="d"}]
output         : ["b", "c", "d"]


ast            : slice([a, b, c], 1, 2)
raw expr       : slice(array(a::Int16, b::Int16, c::Int16), 1_u8, 2_u8)
checked expr   : slice<T0=Int16><Array(T0), UInt64, UInt64>(array<T0=Int16><T0, T0, T0>(a, b, c), to_uint64<UInt8>(1_u8), to_uint64<UInt8>(2_u8))
optimized expr : slice<T0=Int16><Array(T0), UInt64, UInt64>(array<T0=Int16><T0, T0, T0>(a, b, c), 1_u64, 2_u64)
evaluation:
+--------+---------+---------+---------+----------------+
|        | a       | b       | c       | Output         |
+--------+---------+---------+---------+----------------+
| Type   | Int16   | Int16   | Int16   | Array(Int16)   |
| Domain | {0..=2} | {3..=5} | {7..=9} | [{0..=9}]      |
| Row 0  | 0_i16   | 3_i16   | 7_i16   | [0_i16, 3_i16] |
| Row 1  | 1_i16   | 4_i16   | 8_i16   | [1_i16, 4_i16] |
| Row 2  | 2_i16   | 5_i16   | 9_i16   | [2_i16, 5_i16] |
+--------+---------+---------+---------+----------------+
evaluation (internal):
+--------+--------------------------------------------------------------------------+
| Column | Data                                                                     |
+--------+--------------------------------------------------------------------------+
| a      | Int16([0, 1, 2])                                                         |
| b      | Int16([3, 4, 5])                                                         |
| c      | Int16([7, 8, 9])                                                         |
| Output | ArrayColumn { values: Int16([0, 3, 1, 4, 2, 5]), offsets: [0, 2, 4, 6] } |
+--------+--------------------------------------------------------------------------+


ast            : false in (false, true)
raw expr       : or(eq(false, false), eq(false, true))
checked expr   : or<Boolean, Boolean>(eq<Boolean, Boolean>(false, false), eq<Boolean, Boolean>(false, true))
optimized expr : true
output type    : Boolean
output domain  : {TRUE}
output         : true


ast            : '33' in ('1', '33', '23', '33')
raw expr       : contains(array("1", "33", "23", "33"), "33")
checked expr   : contains<Array(String), String>(array<T0=String><T0, T0, T0, T0>("1", "33", "23", "33"), "33")
optimized expr : true
output type    : Boolean
output domain  : {TRUE}
output         : true


ast            : contains([1,2,3], 2)
raw expr       : contains(array(1_u8, 2_u8, 3_u8), 2_u8)
checked expr   : contains<Array(UInt8), UInt8>(array<T0=UInt8><T0, T0, T0>(1_u8, 2_u8, 3_u8), 2_u8)
optimized expr : true
output type    : Boolean
output domain  : {TRUE}
output         : true


ast            : int8_col not in (1, 2, 3, 4, 5, null)
raw expr       : not(contains(array(1_u8, 2_u8, 3_u8, 4_u8, 5_u8), int8_col::Int8))
checked expr   : not<Boolean>(contains<Array(Int16), Int16>(CAST(array<T0=UInt8><T0, T0, T0, T0, T0>(1_u8, 2_u8, 3_u8, 4_u8, 5_u8) AS Array(Int16)), to_int16<Int8>(int8_col)))
optimized expr : not<Boolean>(contains<Array(Int16), Int16>([1_i16, 2_i16, 3_i16, 4_i16, 5_i16], to_int16<Int8>(int8_col)))
evaluation:
+--------+----------+---------------+
|        | int8_col | Output        |
+--------+----------+---------------+
| Type   | Int8     | Boolean       |
| Domain | {1..=8}  | {FALSE, TRUE} |
| Row 0  | 1_i8     | false         |
| Row 1  | 2_i8     | false         |
| Row 2  | 7_i8     | true          |
| Row 3  | 8_i8     | true          |
+--------+----------+---------------+
evaluation (internal):
+----------+-----------------------+
| Column   | Data                  |
+----------+-----------------------+
| int8_col | Int8([1, 2, 7, 8])    |
| Output   | Boolean([0b____1100]) |
+----------+-----------------------+


ast            : contains([1,2,null], nullable_col)
raw expr       : contains(array(1_u8, 2_u8, NULL), nullable_col::Int64 NULL)
checked expr   : contains<T0=Int64 NULL><Array(T0), T0>(CAST(array<T0=UInt8 NULL><T0, T0, T0>(CAST(1_u8 AS UInt8 NULL), CAST(2_u8 AS UInt8 NULL), CAST(NULL AS UInt8 NULL)) AS Array(Int64 NULL)), nullable_col)
optimized expr : contains<T0=Int64 NULL><Array(T0), T0>([1_i64, 2_i64, NULL], nullable_col)
evaluation:
+--------+-------------------+---------------+
|        | nullable_col      | Output        |
+--------+-------------------+---------------+
| Type   | Int64 NULL        | Boolean       |
| Domain | {9..=12} ∪ {NULL} | {FALSE, TRUE} |
| Row 0  | 9_i64             | false         |
| Row 1  | 10_i64            | false         |
| Row 2  | NULL              | true          |
| Row 3  | NULL              | true          |
+--------+-------------------+---------------+
evaluation (internal):
+--------------+---------------------------------------------------------------------------+
| Column       | Data                                                                      |
+--------------+---------------------------------------------------------------------------+
| nullable_col | NullableColumn { column: Int64([9, 10, 11, 12]), validity: [0b____0011] } |
| Output       | Boolean([0b____1100])                                                     |
+--------------+---------------------------------------------------------------------------+


ast            : contains([(1,'2', 3, false), (1,'2', 4, true), null], (1,'2', 3, false))
raw expr       : contains(array(tuple(1_u8, "2", 3_u8, false), tuple(1_u8, "2", 4_u8, true), NULL), tuple(1_u8, "2", 3_u8, false))
checked expr   : contains<T0=Tuple(UInt8, String, UInt8, Boolean) NULL><Array(T0), T0>(array<T0=Tuple(UInt8, String, UInt8, Boolean) NULL><T0, T0, T0>(CAST(tuple<UInt8, String, UInt8, Boolean>(1_u8, "2", 3_u8, false) AS Tuple(UInt8, String, UInt8, Boolean) NULL), CAST(tuple<UInt8, String, UInt8, Boolean>(1_u8, "2", 4_u8, true) AS Tuple(UInt8, String, UInt8, Boolean) NULL), CAST(NULL AS Tuple(UInt8, String, UInt8, Boolean) NULL)), CAST(tuple<UInt8, String, UInt8, Boolean>(1_u8, "2", 3_u8, false) AS Tuple(UInt8, String, UInt8, Boolean) NULL))
optimized expr : true
output type    : Boolean
output domain  : {TRUE}
output         : true


ast            : nullable_col in (null, 9, 10, 12)
raw expr       : or(or(eq(nullable_col::Int64 NULL, 9_u8), eq(nullable_col::Int64 NULL, 10_u8)), eq(nullable_col::Int64 NULL, 12_u8))
checked expr   : or<Boolean NULL, Boolean NULL>(or<Boolean NULL, Boolean NULL>(eq<Int64 NULL, Int64 NULL>(nullable_col, CAST(9_u8 AS Int64 NULL)), eq<Int64 NULL, Int64 NULL>(nullable_col, CAST(10_u8 AS Int64 NULL))), eq<Int64 NULL, Int64 NULL>(nullable_col, CAST(12_u8 AS Int64 NULL)))
optimized expr : or<Boolean NULL, Boolean NULL>(or<Boolean NULL, Boolean NULL>(eq<Int64 NULL, Int64 NULL>(nullable_col, 9_i64), eq<Int64 NULL, Int64 NULL>(nullable_col, 10_i64)), eq<Int64 NULL, Int64 NULL>(nullable_col, 12_i64))
evaluation:
+--------+-------------------+------------------------+
|        | nullable_col      | Output                 |
+--------+-------------------+------------------------+
| Type   | Int64 NULL        | Boolean NULL           |
| Domain | {9..=12} ∪ {NULL} | {FALSE, TRUE} ∪ {NULL} |
| Row 0  | 9_i64             | true                   |
| Row 1  | 10_i64            | true                   |
| Row 2  | NULL              | NULL                   |
| Row 3  | NULL              | NULL                   |
+--------+-------------------+------------------------+
evaluation (internal):
+--------------+---------------------------------------------------------------------------+
| Column       | Data                                                                      |
+--------------+---------------------------------------------------------------------------+
| nullable_col | NullableColumn { column: Int64([9, 10, 11, 12]), validity: [0b____0011] } |
| Output       | NullableColumn { column: Boolean([0b____0011]), validity: [0b____0011] }  |
+--------------+---------------------------------------------------------------------------+


ast            : nullable_col in (1, '9', 3, 10, 12, true, [1,2,3])
raw expr       : contains(array(1_u8, "9", 3_u8, 10_u8, 12_u8, true), nullable_col::Int64 NULL)
checked expr   : contains<T0=Variant NULL><Array(T0), T0>(CAST(array<T0=Variant><T0, T0, T0, T0, T0, T0>(to_variant<T0=UInt8><T0>(1_u8), to_variant<T0=String><T0>("9"), to_variant<T0=UInt8><T0>(3_u8), to_variant<T0=UInt8><T0>(10_u8), to_variant<T0=UInt8><T0>(12_u8), to_variant<T0=Boolean><T0>(true)) AS Array(Variant NULL)), CAST(nullable_col AS Variant NULL))
optimized expr : contains<T0=Variant NULL><Array(T0), T0>([1, "9", 3, 10, 12, true], CAST(nullable_col AS Variant NULL))
evaluation:
+--------+-------------------+---------------+
|        | nullable_col      | Output        |
+--------+-------------------+---------------+
| Type   | Int64 NULL        | Boolean       |
| Domain | {9..=12} ∪ {NULL} | {FALSE, TRUE} |
| Row 0  | 9_i64             | false         |
| Row 1  | 10_i64            | true          |
| Row 2  | NULL              | false         |
| Row 3  | NULL              | false         |
+--------+-------------------+---------------+
evaluation (internal):
+--------------+---------------------------------------------------------------------------+
| Column       | Data                                                                      |
+--------------+---------------------------------------------------------------------------+
| nullable_col | NullableColumn { column: Int64([9, 10, 11, 12]), validity: [0b____0011] } |
| Output       | Boolean([0b____0010])                                                     |
+--------------+---------------------------------------------------------------------------+


ast            : array_remove_first([])
raw expr       : array_remove_first(array())
checked expr   : array_remove_first<Array(Nothing)>(array<>())
optimized expr : [] :: Array(Nothing)
output type    : Array(Nothing)
output domain  : []
output         : []


ast            : array_remove_first([1])
raw expr       : array_remove_first(array(1_u8))
checked expr   : array_remove_first<T0=UInt8><Array(T0)>(array<T0=UInt8><T0>(1_u8))
optimized expr : []
output type    : Array(UInt8)
output domain  : []
output         : []


ast            : array_remove_first([0, 1, 2, NULL])
raw expr       : array_remove_first(array(0_u8, 1_u8, 2_u8, NULL))
checked expr   : array_remove_first<T0=UInt8 NULL><Array(T0)>(array<T0=UInt8 NULL><T0, T0, T0, T0>(CAST(0_u8 AS UInt8 NULL), CAST(1_u8 AS UInt8 NULL), CAST(2_u8 AS UInt8 NULL), CAST(NULL AS UInt8 NULL)))
optimized expr : [1_u8, 2_u8, NULL]
output type    : Array(UInt8 NULL)
output domain  : [{0..=2} ∪ {NULL}]
output         : [1_u8, 2_u8, NULL]


ast            : array_remove_first([0, 1, 2, 3])
raw expr       : array_remove_first(array(0_u8, 1_u8, 2_u8, 3_u8))
checked expr   : array_remove_first<T0=UInt8><Array(T0)>(array<T0=UInt8><T0, T0, T0, T0>(0_u8, 1_u8, 2_u8, 3_u8))
optimized expr : [1_u8, 2_u8, 3_u8]
output type    : Array(UInt8)
output domain  : [{1..=3}]
output         : [1_u8, 2_u8, 3_u8]


ast            : array_remove_first(['a', 'b', 'c', 'd'])
raw expr       : array_remove_first(array("a", "b", "c", "d"))
checked expr   : array_remove_first<T0=String><Array(T0)>(array<T0=String><T0, T0, T0, T0>("a", "b", "c", "d"))
optimized expr : ["b", "c", "d"]
output type    : Array(String)
output domain  : [{"b"..="d"}]
output         : ["b", "c", "d"]


ast            : array_remove_first([a, b])
raw expr       : array_remove_first(array(a::Int16, b::Int16))
checked expr   : array_remove_first<T0=Int16><Array(T0)>(array<T0=Int16><T0, T0>(a, b))
evaluation:
+--------+---------+---------+--------------+
|        | a       | b       | Output       |
+--------+---------+---------+--------------+
| Type   | Int16   | Int16   | Array(Int16) |
| Domain | {0..=2} | {3..=5} | [{0..=5}]    |
| Row 0  | 0_i16   | 3_i16   | [3_i16]      |
| Row 1  | 1_i16   | 4_i16   | [4_i16]      |
| Row 2  | 2_i16   | 5_i16   | [5_i16]      |
+--------+---------+---------+--------------+
evaluation (internal):
+--------+-----------------------------------------------------------------+
| Column | Data                                                            |
+--------+-----------------------------------------------------------------+
| a      | Int16([0, 1, 2])                                                |
| b      | Int16([3, 4, 5])                                                |
| Output | ArrayColumn { values: Int16([3, 4, 5]), offsets: [0, 1, 2, 3] } |
+--------+-----------------------------------------------------------------+


ast            : array_remove_last([])
raw expr       : array_remove_last(array())
checked expr   : array_remove_last<Array(Nothing)>(array<>())
optimized expr : [] :: Array(Nothing)
output type    : Array(Nothing)
output domain  : []
output         : []


ast            : array_remove_last([1])
raw expr       : array_remove_last(array(1_u8))
checked expr   : array_remove_last<T0=UInt8><Array(T0)>(array<T0=UInt8><T0>(1_u8))
optimized expr : []
output type    : Array(UInt8)
output domain  : []
output         : []


ast            : array_remove_last([0, 1, 2, NULL])
raw expr       : array_remove_last(array(0_u8, 1_u8, 2_u8, NULL))
checked expr   : array_remove_last<T0=UInt8 NULL><Array(T0)>(array<T0=UInt8 NULL><T0, T0, T0, T0>(CAST(0_u8 AS UInt8 NULL), CAST(1_u8 AS UInt8 NULL), CAST(2_u8 AS UInt8 NULL), CAST(NULL AS UInt8 NULL)))
optimized expr : [0_u8, 1_u8, 2_u8]
output type    : Array(UInt8 NULL)
output domain  : [{0..=2}]
output         : [0_u8, 1_u8, 2_u8]


ast            : array_remove_last([0, 1, 2, 3])
raw expr       : array_remove_last(array(0_u8, 1_u8, 2_u8, 3_u8))
checked expr   : array_remove_last<T0=UInt8><Array(T0)>(array<T0=UInt8><T0, T0, T0, T0>(0_u8, 1_u8, 2_u8, 3_u8))
optimized expr : [0_u8, 1_u8, 2_u8]
output type    : Array(UInt8)
output domain  : [{0..=2}]
output         : [0_u8, 1_u8, 2_u8]


ast            : array_remove_last(['a', 'b', 'c', 'd'])
raw expr       : array_remove_last(array("a", "b", "c", "d"))
checked expr   : array_remove_last<T0=String><Array(T0)>(array<T0=String><T0, T0, T0, T0>("a", "b", "c", "d"))
optimized expr : ["a", "b", "c"]
output type    : Array(String)
output domain  : [{"a"..="c"}]
output         : ["a", "b", "c"]


ast            : array_remove_last([a, b])
raw expr       : array_remove_last(array(a::Int16, b::Int16))
checked expr   : array_remove_last<T0=Int16><Array(T0)>(array<T0=Int16><T0, T0>(a, b))
evaluation:
+--------+---------+---------+--------------+
|        | a       | b       | Output       |
+--------+---------+---------+--------------+
| Type   | Int16   | Int16   | Array(Int16) |
| Domain | {0..=2} | {3..=5} | [{0..=5}]    |
| Row 0  | 0_i16   | 3_i16   | [0_i16]      |
| Row 1  | 1_i16   | 4_i16   | [1_i16]      |
| Row 2  | 2_i16   | 5_i16   | [2_i16]      |
+--------+---------+---------+--------------+
evaluation (internal):
+--------+-----------------------------------------------------------------+
| Column | Data                                                            |
+--------+-----------------------------------------------------------------+
| a      | Int16([0, 1, 2])                                                |
| b      | Int16([3, 4, 5])                                                |
| Output | ArrayColumn { values: Int16([0, 1, 2]), offsets: [0, 1, 2, 3] } |
+--------+-----------------------------------------------------------------+


ast            : array_concat([], [])
raw expr       : array_concat(array(), array())
checked expr   : array_concat<Array(Nothing) NULL, Array(Nothing) NULL>(CAST(array<>() AS Array(Nothing) NULL), CAST(array<>() AS Array(Nothing) NULL))
optimized expr : [] :: Array(Nothing)
output type    : Array(Nothing)
output domain  : []
output         : []


ast            : array_concat([], [1,2])
raw expr       : array_concat(array(), array(1_u8, 2_u8))
checked expr   : array_concat<T0=UInt8><Array(T0), Array(T0)>(CAST(array<>() AS Array(UInt8)), array<T0=UInt8><T0, T0>(1_u8, 2_u8))
optimized expr : [1_u8, 2_u8]
output type    : Array(UInt8)
output domain  : [{1..=2}]
output         : [1_u8, 2_u8]


ast            : array_concat([false, true], [])
raw expr       : array_concat(array(false, true), array())
checked expr   : array_concat<T0=Boolean><Array(T0), Array(T0)>(array<T0=Boolean><T0, T0>(false, true), CAST(array<>() AS Array(Boolean)))
optimized expr : [false, true]
output type    : Array(Boolean)
output domain  : [{FALSE, TRUE}]
output         : [false, true]


ast            : array_concat([false, true], [1,2])
raw expr       : array_concat(array(false, true), array(1_u8, 2_u8))
checked expr   : array_concat<T0=Variant><Array(T0), Array(T0)>(CAST(array<T0=Boolean><T0, T0>(false, true) AS Array(Variant)), CAST(array<T0=UInt8><T0, T0>(1_u8, 2_u8) AS Array(Variant)))
optimized expr : [false, true, 1, 2]
output type    : Array(Variant)
output domain  : [Undefined]
output         : [false, true, 1, 2]


ast            : array_concat([1,2,3], ['s', null])
raw expr       : array_concat(array(1_u8, 2_u8, 3_u8), array("s", NULL))
checked expr   : array_concat<T0=Variant NULL><Array(T0), Array(T0)>(CAST(array<T0=UInt8><T0, T0, T0>(1_u8, 2_u8, 3_u8) AS Array(Variant NULL)), CAST(array<T0=String NULL><T0, T0>(CAST("s" AS String NULL), CAST(NULL AS String NULL)) AS Array(Variant NULL)))
optimized expr : [1, 2, 3, "s", NULL]
output type    : Array(Variant NULL)
output domain  : [Undefined ∪ {NULL}]
output         : [1, 2, 3, "s", NULL]


ast            : array_concat([1, 2, 3, 4, 5, null], [nullable_col])
raw expr       : array_concat(array(1_u8, 2_u8, 3_u8, 4_u8, 5_u8, NULL), array(nullable_col::Int64 NULL))
checked expr   : array_concat<T0=Int64 NULL><Array(T0), Array(T0)>(CAST(array<T0=UInt8 NULL><T0, T0, T0, T0, T0, T0>(CAST(1_u8 AS UInt8 NULL), CAST(2_u8 AS UInt8 NULL), CAST(3_u8 AS UInt8 NULL), CAST(4_u8 AS UInt8 NULL), CAST(5_u8 AS UInt8 NULL), CAST(NULL AS UInt8 NULL)) AS Array(Int64 NULL)), array<T0=Int64 NULL><T0>(nullable_col))
optimized expr : array_concat<T0=Int64 NULL><Array(T0), Array(T0)>([1_i64, 2_i64, 3_i64, 4_i64, 5_i64, NULL], array<T0=Int64 NULL><T0>(nullable_col))
evaluation:
+--------+-------------------+---------------------------------------------------------+
|        | nullable_col      | Output                                                  |
+--------+-------------------+---------------------------------------------------------+
| Type   | Int64 NULL        | Array(Int64 NULL)                                       |
| Domain | {9..=12} ∪ {NULL} | [{-9223372036854775808..=9223372036854775807} ∪ {NULL}] |
| Row 0  | 9_i64             | [1_i64, 2_i64, 3_i64, 4_i64, 5_i64, NULL, 9_i64]        |
| Row 1  | 10_i64            | [1_i64, 2_i64, 3_i64, 4_i64, 5_i64, NULL, 10_i64]       |
| Row 2  | NULL              | [1_i64, 2_i64, 3_i64, 4_i64, 5_i64, NULL, NULL]         |
| Row 3  | NULL              | [1_i64, 2_i64, 3_i64, 4_i64, 5_i64, NULL, NULL]         |
+--------+-------------------+---------------------------------------------------------+
evaluation (internal):
+--------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Column       | Data                                                                                                                                                                                                                                     |
+--------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| nullable_col | NullableColumn { column: Int64([9, 10, 11, 12]), validity: [0b____0011] }                                                                                                                                                                |
| Output       | ArrayColumn { values: NullableColumn { column: Int64([1, 2, 3, 4, 5, 0, 9, 1, 2, 3, 4, 5, 0, 10, 1, 2, 3, 4, 5, 0, 0, 1, 2, 3, 4, 5, 0, 0]), validity: [0b11011111, 0b11101111, 0b11100111, 0b____0011] }, offsets: [0, 7, 14, 21, 28] } |
+--------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+


ast            : array_concat([1,2,null], [int8_col])
raw expr       : array_concat(array(1_u8, 2_u8, NULL), array(int8_col::Int8))
checked expr   : array_concat<T0=Int16 NULL><Array(T0), Array(T0)>(CAST(array<T0=UInt8 NULL><T0, T0, T0>(CAST(1_u8 AS UInt8 NULL), CAST(2_u8 AS UInt8 NULL), CAST(NULL AS UInt8 NULL)) AS Array(Int16 NULL)), CAST(array<T0=Int8><T0>(int8_col) AS Array(Int16 NULL)))
optimized expr : array_concat<T0=Int16 NULL><Array(T0), Array(T0)>([1_i16, 2_i16, NULL], CAST(array<T0=Int8><T0>(int8_col) AS Array(Int16 NULL)))
evaluation:
+--------+----------+-----------------------------+
|        | int8_col | Output                      |
+--------+----------+-----------------------------+
| Type   | Int8     | Array(Int16 NULL)           |
| Domain | {1..=8}  | [{-32768..=32767} ∪ {NULL}] |
| Row 0  | 1_i8     | [1_i16, 2_i16, NULL, 1_i16] |
| Row 1  | 2_i8     | [1_i16, 2_i16, NULL, 2_i16] |
| Row 2  | 7_i8     | [1_i16, 2_i16, NULL, 7_i16] |
| Row 3  | 8_i8     | [1_i16, 2_i16, NULL, 8_i16] |
+--------+----------+-----------------------------+
evaluation (internal):
+----------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Column   | Data                                                                                                                                                                       |
+----------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| int8_col | Int8([1, 2, 7, 8])                                                                                                                                                         |
| Output   | ArrayColumn { values: NullableColumn { column: Int16([1, 2, 0, 1, 1, 2, 0, 2, 1, 2, 0, 7, 1, 2, 0, 8]), validity: [0b10111011, 0b10111011] }, offsets: [0, 4, 8, 12, 16] } |
+----------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------+


ast            : array_prepend(1, [])
raw expr       : array_prepend(1_u8, array())
checked expr   : array_prepend<T0=UInt8><T0, Array(T0)>(1_u8, CAST(array<>() AS Array(UInt8)))
optimized expr : [1_u8]
output type    : Array(UInt8)
output domain  : [{1..=1}]
output         : [1_u8]


ast            : array_prepend(1, [2, 3, NULL, 4])
raw expr       : array_prepend(1_u8, array(2_u8, 3_u8, NULL, 4_u8))
checked expr   : array_prepend<T0=UInt8 NULL><T0, Array(T0)>(CAST(1_u8 AS UInt8 NULL), array<T0=UInt8 NULL><T0, T0, T0, T0>(CAST(2_u8 AS UInt8 NULL), CAST(3_u8 AS UInt8 NULL), CAST(NULL AS UInt8 NULL), CAST(4_u8 AS UInt8 NULL)))
optimized expr : [1_u8, 2_u8, 3_u8, NULL, 4_u8]
output type    : Array(UInt8 NULL)
output domain  : [{0..=4} ∪ {NULL}]
output         : [1_u8, 2_u8, 3_u8, NULL, 4_u8]


ast            : array_prepend('a', ['b', NULL, NULL, 'c', 'd'])
raw expr       : array_prepend("a", array("b", NULL, NULL, "c", "d"))
checked expr   : array_prepend<T0=String NULL><T0, Array(T0)>(CAST("a" AS String NULL), array<T0=String NULL><T0, T0, T0, T0, T0>(CAST("b" AS String NULL), CAST(NULL AS String NULL), CAST(NULL AS String NULL), CAST("c" AS String NULL), CAST("d" AS String NULL)))
optimized expr : ["a", "b", NULL, NULL, "c", "d"]
output type    : Array(String NULL)
output domain  : [{""..="d"} ∪ {NULL}]
output         : ["a", "b", NULL, NULL, "c", "d"]


ast            : array_prepend(a, [b, c])
raw expr       : array_prepend(a::Int16, array(b::Int16, c::Int16))
checked expr   : array_prepend<T0=Int16><T0, Array(T0)>(a, array<T0=Int16><T0, T0>(b, c))
evaluation:
+--------+---------+---------+---------+-----------------------+
|        | a       | b       | c       | Output                |
+--------+---------+---------+---------+-----------------------+
| Type   | Int16   | Int16   | Int16   | Array(Int16)          |
| Domain | {0..=2} | {3..=5} | {6..=8} | [{-32768..=32767}]    |
| Row 0  | 0_i16   | 3_i16   | 6_i16   | [0_i16, 3_i16, 6_i16] |
| Row 1  | 1_i16   | 4_i16   | 7_i16   | [1_i16, 4_i16, 7_i16] |
| Row 2  | 2_i16   | 5_i16   | 8_i16   | [2_i16, 5_i16, 8_i16] |
+--------+---------+---------+---------+-----------------------+
evaluation (internal):
+--------+-----------------------------------------------------------------------------------+
| Column | Data                                                                              |
+--------+-----------------------------------------------------------------------------------+
| a      | Int16([0, 1, 2])                                                                  |
| b      | Int16([3, 4, 5])                                                                  |
| c      | Int16([6, 7, 8])                                                                  |
| Output | ArrayColumn { values: Int16([0, 3, 6, 1, 4, 7, 2, 5, 8]), offsets: [0, 3, 6, 9] } |
+--------+-----------------------------------------------------------------------------------+


ast            : array_append([], 1)
raw expr       : array_append(array(), 1_u8)
checked expr   : array_append<T0=UInt8><Array(T0), T0>(CAST(array<>() AS Array(UInt8)), 1_u8)
optimized expr : [1_u8]
output type    : Array(UInt8)
output domain  : [{1..=1}]
output         : [1_u8]


ast            : array_append([2, 3, NULL, 4], 5)
raw expr       : array_append(array(2_u8, 3_u8, NULL, 4_u8), 5_u8)
checked expr   : array_append<T0=UInt8 NULL><Array(T0), T0>(array<T0=UInt8 NULL><T0, T0, T0, T0>(CAST(2_u8 AS UInt8 NULL), CAST(3_u8 AS UInt8 NULL), CAST(NULL AS UInt8 NULL), CAST(4_u8 AS UInt8 NULL)), CAST(5_u8 AS UInt8 NULL))
optimized expr : [2_u8, 3_u8, NULL, 4_u8, 5_u8]
output type    : Array(UInt8 NULL)
output domain  : [{0..=5} ∪ {NULL}]
output         : [2_u8, 3_u8, NULL, 4_u8, 5_u8]


ast            : array_append(['b', NULL, NULL, 'c', 'd'], 'e')
raw expr       : array_append(array("b", NULL, NULL, "c", "d"), "e")
checked expr   : array_append<T0=String NULL><Array(T0), T0>(array<T0=String NULL><T0, T0, T0, T0, T0>(CAST("b" AS String NULL), CAST(NULL AS String NULL), CAST(NULL AS String NULL), CAST("c" AS String NULL), CAST("d" AS String NULL)), CAST("e" AS String NULL))
optimized expr : ["b", NULL, NULL, "c", "d", "e"]
output type    : Array(String NULL)
output domain  : [{""..="e"} ∪ {NULL}]
output         : ["b", NULL, NULL, "c", "d", "e"]


ast            : array_append([b, c], a)
raw expr       : array_append(array(b::Int16, c::Int16), a::Int16)
checked expr   : array_append<T0=Int16><Array(T0), T0>(array<T0=Int16><T0, T0>(b, c), a)
evaluation:
+--------+---------+---------+---------+-----------------------+
|        | a       | b       | c       | Output                |
+--------+---------+---------+---------+-----------------------+
| Type   | Int16   | Int16   | Int16   | Array(Int16)          |
| Domain | {0..=2} | {3..=5} | {6..=8} | [{-32768..=32767}]    |
| Row 0  | 0_i16   | 3_i16   | 6_i16   | [3_i16, 6_i16, 0_i16] |
| Row 1  | 1_i16   | 4_i16   | 7_i16   | [4_i16, 7_i16, 1_i16] |
| Row 2  | 2_i16   | 5_i16   | 8_i16   | [5_i16, 8_i16, 2_i16] |
+--------+---------+---------+---------+-----------------------+
evaluation (internal):
+--------+-----------------------------------------------------------------------------------+
| Column | Data                                                                              |
+--------+-----------------------------------------------------------------------------------+
| a      | Int16([0, 1, 2])                                                                  |
| b      | Int16([3, 4, 5])                                                                  |
| c      | Int16([6, 7, 8])                                                                  |
| Output | ArrayColumn { values: Int16([3, 6, 0, 4, 7, 1, 5, 8, 2]), offsets: [0, 3, 6, 9] } |
+--------+-----------------------------------------------------------------------------------+


ast            : array_indexof([], NULL)
raw expr       : array_indexof(array(), NULL)
checked expr   : array_indexof<T0=NULL><Array(T0), T0>(CAST(array<>() AS Array(NULL)), NULL)
optimized expr : 0_u64
output type    : UInt64
output domain  : {0..=0}
output         : 0_u64


ast            : array_indexof(NULL, NULL)
raw expr       : array_indexof(NULL, NULL)
checked expr   : array_indexof<NULL, NULL>(NULL, NULL)
optimized expr : NULL
output type    : NULL
output domain  : {NULL}
output         : NULL


ast            : array_indexof([false, true], false)
raw expr       : array_indexof(array(false, true), false)
checked expr   : array_indexof<T0=Boolean><Array(T0), T0>(array<T0=Boolean><T0, T0>(false, true), false)
optimized expr : 1_u64
output type    : UInt64
output domain  : {1..=1}
output         : 1_u64


ast            : array_indexof([], false)
raw expr       : array_indexof(array(), false)
checked expr   : array_indexof<T0=Boolean><Array(T0), T0>(CAST(array<>() AS Array(Boolean)), false)
optimized expr : 0_u64
output type    : UInt64
output domain  : {0..=0}
output         : 0_u64


ast            : array_indexof([false, true], null)
raw expr       : array_indexof(array(false, true), NULL)
checked expr   : array_indexof<T0=Boolean NULL><Array(T0), T0>(CAST(array<T0=Boolean><T0, T0>(false, true) AS Array(Boolean NULL)), CAST(NULL AS Boolean NULL))
optimized expr : 0_u64
output type    : UInt64
output domain  : {0..=0}
output         : 0_u64


ast            : array_indexof([false, true], 0)
raw expr       : array_indexof(array(false, true), 0_u8)
checked expr   : array_indexof<T0=Variant><Array(T0), T0>(CAST(array<T0=Boolean><T0, T0>(false, true) AS Array(Variant)), to_variant<T0=UInt8><T0>(0_u8))
optimized expr : 0_u64
output type    : UInt64
output domain  : {0..=0}
output         : 0_u64


ast            : array_indexof([1,2,3,'s'], 's')
raw expr       : array_indexof(array(1_u8, 2_u8, 3_u8, "s"), "s")
checked expr   : array_indexof<T0=Variant><Array(T0), T0>(array<T0=Variant><T0, T0, T0, T0>(to_variant<T0=UInt8><T0>(1_u8), to_variant<T0=UInt8><T0>(2_u8), to_variant<T0=UInt8><T0>(3_u8), to_variant<T0=String><T0>("s")), to_variant<T0=String><T0>("s"))
optimized expr : 4_u64
output type    : UInt64
output domain  : {4..=4}
output         : 4_u64


ast            : array_indexof([1,'x',null,'x'], 'x')
raw expr       : array_indexof(array(1_u8, "x", NULL, "x"), "x")
checked expr   : array_indexof<T0=Variant NULL><Array(T0), T0>(array<T0=Variant NULL><T0, T0, T0, T0>(CAST(1_u8 AS Variant NULL), CAST("x" AS Variant NULL), CAST(NULL AS Variant NULL), CAST("x" AS Variant NULL)), CAST("x" AS Variant NULL))
optimized expr : 2_u64
output type    : UInt64
output domain  : {2..=2}
output         : 2_u64


ast            : array_indexof([1, 2, 3, 4, 5, null], nullable_col)
raw expr       : array_indexof(array(1_u8, 2_u8, 3_u8, 4_u8, 5_u8, NULL), nullable_col::Int64 NULL)
checked expr   : array_indexof<T0=Int64 NULL><Array(T0), T0>(CAST(array<T0=UInt8 NULL><T0, T0, T0, T0, T0, T0>(CAST(1_u8 AS UInt8 NULL), CAST(2_u8 AS UInt8 NULL), CAST(3_u8 AS UInt8 NULL), CAST(4_u8 AS UInt8 NULL), CAST(5_u8 AS UInt8 NULL), CAST(NULL AS UInt8 NULL)) AS Array(Int64 NULL)), nullable_col)
optimized expr : array_indexof<T0=Int64 NULL><Array(T0), T0>([1_i64, 2_i64, 3_i64, 4_i64, 5_i64, NULL], nullable_col)
evaluation:
+--------+-------------------+----------------------------+
|        | nullable_col      | Output                     |
+--------+-------------------+----------------------------+
| Type   | Int64 NULL        | UInt64                     |
| Domain | {9..=12} ∪ {NULL} | {0..=18446744073709551615} |
| Row 0  | 9_i64             | 0_u64                      |
| Row 1  | 10_i64            | 0_u64                      |
| Row 2  | NULL              | 6_u64                      |
| Row 3  | NULL              | 6_u64                      |
+--------+-------------------+----------------------------+
evaluation (internal):
+--------------+---------------------------------------------------------------------------+
| Column       | Data                                                                      |
+--------------+---------------------------------------------------------------------------+
| nullable_col | NullableColumn { column: Int64([9, 10, 11, 12]), validity: [0b____0011] } |
| Output       | UInt64([0, 0, 6, 6])                                                      |
+--------------+---------------------------------------------------------------------------+


ast            : array_indexof([9,10,null], int8_col)
raw expr       : array_indexof(array(9_u8, 10_u8, NULL), int8_col::Int8)
checked expr   : array_indexof<T0=Int16 NULL><Array(T0), T0>(CAST(array<T0=UInt8 NULL><T0, T0, T0>(CAST(9_u8 AS UInt8 NULL), CAST(10_u8 AS UInt8 NULL), CAST(NULL AS UInt8 NULL)) AS Array(Int16 NULL)), CAST(int8_col AS Int16 NULL))
optimized expr : array_indexof<T0=Int16 NULL><Array(T0), T0>([9_i16, 10_i16, NULL], CAST(int8_col AS Int16 NULL))
evaluation:
+--------+----------+----------------------------+
|        | int8_col | Output                     |
+--------+----------+----------------------------+
| Type   | Int8     | UInt64                     |
| Domain | {1..=8}  | {0..=18446744073709551615} |
| Row 0  | 1_i8     | 0_u64                      |
| Row 1  | 2_i8     | 0_u64                      |
| Row 2  | 7_i8     | 0_u64                      |
| Row 3  | 8_i8     | 0_u64                      |
+--------+----------+----------------------------+
evaluation (internal):
+----------+----------------------+
| Column   | Data                 |
+----------+----------------------+
| int8_col | Int8([1, 2, 7, 8])   |
| Output   | UInt64([0, 0, 0, 0]) |
+----------+----------------------+


ast            : array_unique([])
raw expr       : array_unique(array())
checked expr   : array_unique<Array(Nothing)>(array<>())
optimized expr : 0_u64
output type    : UInt64
output domain  : {0..=0}
output         : 0_u64


ast            : array_unique([1, 1, 2, 2, 3, NULL])
raw expr       : array_unique(array(1_u8, 1_u8, 2_u8, 2_u8, 3_u8, NULL))
checked expr   : array_unique<T0=UInt8 NULL><Array(T0)>(array<T0=UInt8 NULL><T0, T0, T0, T0, T0, T0>(CAST(1_u8 AS UInt8 NULL), CAST(1_u8 AS UInt8 NULL), CAST(2_u8 AS UInt8 NULL), CAST(2_u8 AS UInt8 NULL), CAST(3_u8 AS UInt8 NULL), CAST(NULL AS UInt8 NULL)))
optimized expr : 3_u64
output type    : UInt64
output domain  : {3..=3}
output         : 3_u64


ast            : array_unique(['a', NULL, 'a', 'b', NULL, 'c', 'd'])
raw expr       : array_unique(array("a", NULL, "a", "b", NULL, "c", "d"))
checked expr   : array_unique<T0=String NULL><Array(T0)>(array<T0=String NULL><T0, T0, T0, T0, T0, T0, T0>(CAST("a" AS String NULL), CAST(NULL AS String NULL), CAST("a" AS String NULL), CAST("b" AS String NULL), CAST(NULL AS String NULL), CAST("c" AS String NULL), CAST("d" AS String NULL)))
optimized expr : 4_u64
output type    : UInt64
output domain  : {4..=4}
output         : 4_u64


ast            : array_unique([a, b, c, d])
raw expr       : array_unique(array(a::Int16, b::Int16, c::Int16, d::Int16))
checked expr   : array_unique<T0=Int16><Array(T0)>(array<T0=Int16><T0, T0, T0, T0>(a, b, c, d))
evaluation:
+--------+---------+---------+---------+---------+----------------------------+
|        | a       | b       | c       | d       | Output                     |
+--------+---------+---------+---------+---------+----------------------------+
| Type   | Int16   | Int16   | Int16   | Int16   | UInt64                     |
| Domain | {1..=4} | {1..=4} | {1..=4} | {2..=4} | {0..=18446744073709551615} |
| Row 0  | 1_i16   | 2_i16   | 3_i16   | 4_i16   | 4_u64                      |
| Row 1  | 1_i16   | 1_i16   | 1_i16   | 2_i16   | 2_u64                      |
| Row 2  | 2_i16   | 2_i16   | 3_i16   | 3_i16   | 2_u64                      |
| Row 3  | 4_i16   | 4_i16   | 4_i16   | 4_i16   | 1_u64                      |
+--------+---------+---------+---------+---------+----------------------------+
evaluation (internal):
+--------+----------------------+
| Column | Data                 |
+--------+----------------------+
| a      | Int16([1, 1, 2, 4])  |
| b      | Int16([2, 1, 2, 4])  |
| c      | Int16([3, 1, 3, 4])  |
| d      | Int16([4, 2, 3, 4])  |
| Output | UInt64([4, 2, 2, 1]) |
+--------+----------------------+


ast            : array_distinct([])
raw expr       : array_distinct(array())
checked expr   : array_distinct<Array(Nothing)>(array<>())
optimized expr : [] :: Array(Nothing)
output type    : Array(Nothing)
output domain  : []
output         : []


ast            : array_distinct([1, 1, 2, 2, 3, NULL])
raw expr       : array_distinct(array(1_u8, 1_u8, 2_u8, 2_u8, 3_u8, NULL))
checked expr   : array_distinct<T0=UInt8 NULL><Array(T0)>(array<T0=UInt8 NULL><T0, T0, T0, T0, T0, T0>(CAST(1_u8 AS UInt8 NULL), CAST(1_u8 AS UInt8 NULL), CAST(2_u8 AS UInt8 NULL), CAST(2_u8 AS UInt8 NULL), CAST(3_u8 AS UInt8 NULL), CAST(NULL AS UInt8 NULL)))
optimized expr : [1_u8, 2_u8, 3_u8]
output type    : Array(UInt8 NULL)
output domain  : [{1..=3}]
output         : [1_u8, 2_u8, 3_u8]


ast            : array_distinct(['a', NULL, 'a', 'b', NULL, 'c', 'd'])
raw expr       : array_distinct(array("a", NULL, "a", "b", NULL, "c", "d"))
checked expr   : array_distinct<T0=String NULL><Array(T0)>(array<T0=String NULL><T0, T0, T0, T0, T0, T0, T0>(CAST("a" AS String NULL), CAST(NULL AS String NULL), CAST("a" AS String NULL), CAST("b" AS String NULL), CAST(NULL AS String NULL), CAST("c" AS String NULL), CAST("d" AS String NULL)))
optimized expr : ["a", "b", "c", "d"]
output type    : Array(String NULL)
output domain  : [{"a"..="d"}]
output         : ["a", "b", "c", "d"]


ast            : array_distinct([a, b, c, d])
raw expr       : array_distinct(array(a::Int16, b::Int16, c::Int16, d::Int16))
checked expr   : array_distinct<T0=Int16><Array(T0)>(array<T0=Int16><T0, T0, T0, T0>(a, b, c, d))
evaluation:
+--------+---------+---------+---------+---------+------------------------------+
|        | a       | b       | c       | d       | Output                       |
+--------+---------+---------+---------+---------+------------------------------+
| Type   | Int16   | Int16   | Int16   | Int16   | Array(Int16)                 |
| Domain | {1..=4} | {1..=4} | {1..=4} | {2..=4} | [{-32768..=32767}]           |
| Row 0  | 1_i16   | 2_i16   | 3_i16   | 4_i16   | [1_i16, 2_i16, 3_i16, 4_i16] |
| Row 1  | 1_i16   | 1_i16   | 1_i16   | 2_i16   | [1_i16, 2_i16]               |
| Row 2  | 2_i16   | 2_i16   | 3_i16   | 3_i16   | [2_i16, 3_i16]               |
| Row 3  | 4_i16   | 4_i16   | 4_i16   | 4_i16   | [4_i16]                      |
+--------+---------+---------+---------+---------+------------------------------+
evaluation (internal):
+--------+--------------------------------------------------------------------------------------+
| Column | Data                                                                                 |
+--------+--------------------------------------------------------------------------------------+
| a      | Int16([1, 1, 2, 4])                                                                  |
| b      | Int16([2, 1, 2, 4])                                                                  |
| c      | Int16([3, 1, 3, 4])                                                                  |
| d      | Int16([4, 2, 3, 4])                                                                  |
| Output | ArrayColumn { values: Int16([1, 2, 3, 4, 1, 2, 2, 3, 4]), offsets: [0, 4, 6, 8, 9] } |
+--------+--------------------------------------------------------------------------------------+



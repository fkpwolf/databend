// Copyright 2023 Datafuse Labs.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

use common_exception::ErrorCode;
use common_exception::Result;
use common_expression::Scalar;

#[derive(Copy, Clone, Debug)]
pub struct ReadOptions {
    /// Prune row groups before reading. Require Chunk level statistics.
    /// Filter row groups don't need to read.
    prune_row_groups: bool,
    /// Prune pages before reading. Require Page level statistics.
    /// Filter rows don't need to read.
    prune_pages: bool,
    /// If use prewhere filter.
    do_prewhere: bool,
    /// If push down bitmap generated by prewhere reader to remain reader.
    /// If true, when remain reader deserializing,
    /// it will skip part of decompression and decoding according to the bitmap.
    ///
    /// Notice:
    ///
    /// - `push_down_bitmap` and  `prune_pages` are exclusive. (`push_down_bitmap && prune_pages == false`)
    /// - If `push_down_bitmap` is true, `do_prewhere` should be true, too.
    push_down_bitmap: bool,
    // /// If refresh the file meta data cache.
    // refresh_meta_cache: bool,
}

impl ReadOptions {
    #[inline]
    pub fn new() -> Self {
        ReadOptions::default()
    }

    #[inline]
    pub fn with_prune_row_groups(mut self, v: bool) -> Self {
        self.prune_row_groups = v;
        self
    }

    #[inline]
    pub fn with_prune_pages(mut self, v: bool) -> Self {
        self.prune_pages = v;
        self.push_down_bitmap = self.push_down_bitmap && !v;
        self
    }

    #[inline]
    pub fn with_push_down_bitmap(mut self, v: bool) -> Self {
        self.push_down_bitmap = v;
        self.do_prewhere = v;
        self.prune_pages = self.prune_pages && !v;
        self
    }

    #[inline]
    pub fn with_do_prewhere(mut self, v: bool) -> Self {
        self.do_prewhere = v;
        self
    }

    // #[inline]
    // pub fn with_refresh_meta_cache(mut self, v: bool) -> Self {
    //     self.refresh_meta_cache = v;
    //     self
    // }

    #[inline]
    pub fn prune_row_groups(&self) -> bool {
        self.prune_row_groups
    }

    #[inline]
    pub fn prune_pages(&self) -> bool {
        self.prune_pages
    }

    #[inline]
    pub fn push_down_bitmap(&self) -> bool {
        self.push_down_bitmap
    }

    #[inline]
    pub fn do_prewhere(&self) -> bool {
        self.do_prewhere
    }

    // #[inline]
    // pub fn refresh_meta_cache(&self) -> bool {
    //     self.refresh_meta_cache
    // }
}

impl Default for ReadOptions {
    fn default() -> Self {
        ReadOptions {
            do_prewhere: true,
            prune_row_groups: true,
            prune_pages: false,
            push_down_bitmap: false,
            // refresh_meta_cache: false,
        }
    }
}

/// Convert ReadOptions into tuples.
impl From<ReadOptions> for Vec<Scalar> {
    fn from(value: ReadOptions) -> Self {
        vec![
            make_pair("prune_row_groups", value.prune_row_groups),
            make_pair("prune_pages", value.prune_pages),
            make_pair("do_prewhere", value.do_prewhere),
            make_pair("push_down_bitmap", value.push_down_bitmap),
            // make_pair("refresh_meta_cache", value.refresh_meta_cache),
        ]
    }
}

fn make_pair(name: &str, value: bool) -> Scalar {
    Scalar::Tuple(vec![
        Scalar::String(name.to_string().into_bytes()),
        Scalar::Boolean(value),
    ])
}

impl TryFrom<&[Scalar]> for ReadOptions {
    type Error = ErrorCode;
    fn try_from(values: &[Scalar]) -> Result<Self> {
        let mut opts = ReadOptions::default();
        for value in values {
            let (name, v) = get_boolean_option(value)?;
            opts = match name {
                b"prune_row_groups" => opts.with_prune_row_groups(v),
                b"prune_pages" => opts.with_prune_pages(v),
                b"do_prewhere" => opts.with_do_prewhere(v),
                b"push_down_bitmap" => opts.with_push_down_bitmap(v),
                // b"refresh_meta_cache" => opts.with_refresh_meta_cache(v),
                _ => {
                    return Err(ErrorCode::BadArguments(format!(
                        "Unknown option: {}",
                        String::from_utf8(name.to_vec())?
                    )));
                }
            };
        }

        Ok(opts)
    }
}

fn get_boolean_option(pair: &Scalar) -> Result<(&[u8], bool)> {
    match pair {
        Scalar::Tuple(p) => {
            if p.len() != 2 {
                return Err(ErrorCode::BadArguments(format!(
                    "expect a pair of (string, bool), found: {:?}",
                    pair,
                )));
            }
            match (&p[0], &p[1]) {
                (Scalar::String(name), Scalar::Boolean(value)) => Ok((name, *value)),
                (_, _) => Err(ErrorCode::BadArguments(format!(
                    "expect a pair of (string, bool), found: {:?}",
                    pair,
                ))),
            }
        }
        _ => Err(ErrorCode::BadArguments(format!(
            "expect a pair of (string, bool), found: {:?}",
            pair,
        ))),
    }
}

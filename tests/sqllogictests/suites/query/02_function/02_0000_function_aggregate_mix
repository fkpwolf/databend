query I
SELECT sum(number) from numbers_mt(10000)
----
49995000

query I
SELECT min(number) from numbers_mt(10000)
----
0

query I
SELECT max(number) from numbers_mt(10000)
----
9999

query F
SELECT avg(number) from numbers_mt(10000)
----
4999.5

query I
SELECT count(number) from numbers_mt(10000)
----
10000

query F
SELECT sum(number)/count(number) from numbers_mt(10000)
----
4999.5

query I
SELECT arg_min(number, number) from numbers_mt(10000)
----
0

query I
SELECT arg_min(a, b) from (select number + 5 as a, number - 5 as b from numbers_mt(10000))
----
5

query I
SELECT arg_min(b, a) from (select number + 5 as a, number - 5 as b from numbers_mt(10000))
----
-5

query I
SELECT arg_max(number, number) from numbers_mt(10000)
----
9999

query I
SELECT arg_max(a, b) from (select number + 5 as a, number - 5 as b from numbers_mt(10000))
----
10004

query I
SELECT arg_max(b, a) from (select number + 5 as a, number - 5 as b from numbers_mt(10000))
----
9994

query I
SELECT arg_max(a, b) from (select number + 5 as a, cast(number as varchar(255)) as b from numbers_mt(10000))
----
10004

query T
SELECT arg_max(b, a) from (select number + 5 as a, cast(number as varchar(255)) as b from numbers_mt(10000))
----
9999

query I
select count(distinct number, number + 1 , number + 3 ) from ( select number % 100 as number from numbers(100000))
----
100

query I
select count(distinct 3) from numbers(10000)
----
1

query B
select uniq(number, number + 1 , number + 3 )  =  count(distinct number, number + 1 , number + 3 ) from ( select number % 100 as number from numbers(100000))
----
1

query B
select uniq(number::Float64)  = 100 from ( select number % 100 as number from numbers(100000))
----
1

query B
SELECT std(number) between  2886.751 and 2886.752 from numbers_mt(10000)
----
1



query B
SELECT stddev(number) between  2886.751 and 2886.752 from numbers_mt(10000)
----
1


query B
SELECT stddev_pop(number) between  2886.751 and 2886.752 from numbers_mt(10000)
----
1


query F
SELECT covar_samp(number, number) from (select * from numbers_mt(5) order by number asc)
----
2.5

query F
SELECT covar_pop(number, number) from (select * from numbers_mt(5) order by number asc)
----
2.0

statement ok
DROP DATABASE IF EXISTS db1

statement ok
CREATE DATABASE db1

statement ok
USE db1

statement ok
CREATE TABLE IF NOT EXISTS t1(id Int null, var Variant null) Engine = Fuse

statement ok
INSERT INTO t1 SELECT 1, parse_json('{"k":"v"}')

statement ok
INSERT INTO t1 SELECT 2, parse_json('"abcd"')

query TT
SELECT max(var), min(var) FROM t1
----
{"k":"v"} "abcd"

query II
SELECT arg_max(id, var), arg_min(id, var) FROM (SELECT id, var FROM t1)
----
1 2

statement ok
INSERT INTO t1 SELECT 3, parse_json('[1,2,3]')

statement ok
INSERT INTO t1 SELECT 4, parse_json('10')


query II
SELECT arg_max(id, var), arg_min(id, var) FROM (SELECT id, var FROM t1)
----
3 4

statement ok
INSERT INTO t1 SELECT 5, parse_json('null')

statement ok
INSERT INTO t1 SELECT 6, parse_json('true')

query TT
SELECT max(var), min(var) FROM t1
----
null true

query II
SELECT arg_max(id, var), arg_min(id, var) FROM (SELECT id, var FROM t1)
----
5 6

statement ok
CREATE TABLE IF NOT EXISTS t2(id Int null, arr Array(Int32)) Engine = Fuse

statement ok
INSERT INTO t2 VALUES(1, [1,2,3])

statement ok
INSERT INTO t2 VALUES(2, [1,2,4])

statement ok
INSERT INTO t2 VALUES(3, [3,4,5])

query TT
SELECT max(arr), min(arr) FROM t2
----
[3,4,5] [1,2,3]

query II
SELECT arg_max(id, arr), arg_min(id, arr) FROM (SELECT id, arr FROM t2)
----
3 1

query IIFI
select number % 3,   sum(number), avg(number),  count() from numbers(100) group by number % 3  order by number % 3
----
0 1683 49.5 34
1 1617 49.0 33
2 1650 50.0 33

query I
SELECT median(number) from numbers_mt(10000)
----
4999

query I
SELECT quantile(0.6)(number) from numbers_mt(10000)
----
5999

statement ok
DROP DATABASE db1


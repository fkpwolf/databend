statement ok
drop table if exists t1 all;

statement ok
drop table if exists t2 all;

statement ok
create table t1(a int, b int);

statement ok
create table t2(a int, b int);

query T
explain select t1.a from t1 where a > 0;
----
Exchange
├── exchange type: Merge
└── Filter
   ├── filters: [>(t1.a (#0), 0)]
   └── TableScan
       ├── table: default.default.t1
       ├── read rows: 0
       ├── read bytes: 0
       ├── partitions total: 0
       ├── partitions scanned: 0
       ├── push downs: [filters: [(a > 0)], limit: NONE]
       └── output columns: [0]

query T
explain select * from t1, t2 where (t1.a = t2.a and t1.a > 3) or (t1.a = t2.a and t2.a > 5 and t1.a > 1);
----
Exchange
├── exchange type: Merge
└── Filter
    ├── filters: [or(>(t1.a (#0), 3), and(>(t2.a (#2), 5), >(t1.a (#0), 1)))]
    └── HashJoin
        ├── join type: INNER
        ├── build keys: [t2.a (#2)]
        ├── probe keys: [t1.a (#0)]
        ├── filters: []
        ├── Exchange(Build)
        │   ├── exchange type: Hash(t2.a (#2))
        │   └── TableScan
        │       ├── table: default.default.t2
        │       ├── read rows: 0
        │       ├── read bytes: 0
        │       ├── partitions total: 0
        │       ├── partitions scanned: 0
        │       └── push downs: [filters: [], limit: NONE]
        └── Exchange(Probe)
            ├── exchange type: Hash(t1.a (#0))
            └── Filter
                ├── filters: [or(>(t1.a (#0), 3), >(t1.a (#0), 1))]
                └── TableScan
                    ├── table: default.default.t1
                    ├── read rows: 0
                    ├── read bytes: 0
                    ├── partitions total: 0
                    ├── partitions scanned: 0
                    └── push downs: [filters: [((a > 3) or (a > 1))], limit: NONE]

query T
explain select * from t1, t2 where (t1.a = t2.a and t1.a > 3) or (t1.a = t2.a);
----
Exchange
├── exchange type: Merge
└── HashJoin
    ├── join type: INNER
    ├── build keys: [t2.a (#2)]
    ├── probe keys: [t1.a (#0)]
    ├── filters: []
    ├── Exchange(Build)
    │   ├── exchange type: Hash(t2.a (#2))
    │   └── TableScan
    │       ├── table: default.default.t2
    │       ├── read rows: 0
    │       ├── read bytes: 0
    │       ├── partitions total: 0
    │       ├── partitions scanned: 0
    │       └── push downs: [filters: [], limit: NONE]
    └── Exchange(Probe)
        ├── exchange type: Hash(t1.a (#0))
        └── TableScan
            ├── table: default.default.t1
            ├── read rows: 0
            ├── read bytes: 0
            ├── partitions total: 0
            ├── partitions scanned: 0
            └── push downs: [filters: [], limit: NONE]

query T
explain raw select * from t1, t2 where (t1.a = t2.a and t1.a > 3) or (t1.a = t2.a);
----
EvalScalar
├── scalars: [t1.a (#0), t1.b (#1), t2.a (#2), t2.b (#3)]
└── Filter
    ├── filters: [((t1.a (#0) = t2.a (#2)) AND (t1.a (#0) > 3)) OR (t1.a (#0) = t2.a (#2))]
    └── LogicalJoin: CROSS
        ├── equi conditions: []
        ├── non-equi conditions: []
        ├── LogicalGet
        │   ├── table: default.default.t1
        │   ├── filters: []
        │   ├── order by: []
        │   └── limit: NONE
        └── LogicalGet
            ├── table: default.default.t2
            ├── filters: []
            ├── order by: []
            └── limit: NONE

query T
explain raw select * from t1 inner join t2 on t1.a = t2.a and t1.b = t2.b and t1.a > 2;
----
EvalScalar
├── scalars: [t1.a (#0), t1.b (#1), t2.a (#2), t2.b (#3)]
└── LogicalJoin: INNER
    ├── equi conditions: [(t1.a (#0) = t2.a (#2)) AND (t1.b (#1) = t2.b (#3))]
    ├── non-equi conditions: []
    ├── Filter
    │   ├── filters: [t1.a (#0) > 2]
    │   └── LogicalGet
    │       ├── table: default.default.t1
    │       ├── filters: []
    │       ├── order by: []
    │       └── limit: NONE
    └── LogicalGet
        ├── table: default.default.t2
        ├── filters: []
        ├── order by: []
        └── limit: NONE

query T
explain select count(1) as c, count(b) as d, max(a) as e from t1 order by c, e, d limit 10;
----
Limit
├── limit: 10
├── offset: 0
└── Sort
    ├── sort keys: [c ASC NULLS LAST, e ASC NULLS LAST, d ASC NULLS LAST]
    └── EvalScalar
        ├── expressions: [count(1) (#8), max(a) (#10), count(b) (#9)]
        └── AggregateFinal
            ├── group by: []
            ├── aggregate functions: [count(), count(b), max(a)]
            └── Exchange
                ├── exchange type: Merge
                └── AggregatePartial
                    ├── group by: []
                    ├── aggregate functions: [count(), count(b), max(a)]
                    └── TableScan
                        ├── table: default.default.t1
                        ├── read rows: 0
                        ├── read bytes: 0
                        ├── partitions total: 0
                        ├── partitions scanned: 0
                        └── push downs: [filters: [], limit: NONE]

query T
explain select (t1.a + 1) as c,(t1.b+1) as d, (t2.a+1) as e from t1 join t2 on t1.a = t2.a order by c, d, e limit 10;
----
Limit
├── limit: 10
├── offset: 0
└── Sort
    ├── sort keys: [c ASC NULLS LAST, d ASC NULLS LAST, e ASC NULLS LAST]
    └── Exchange                
        ├── exchange type: Merge
        └── Limit
            ├── limit: 10
            ├── offset: 0
            └── Sort
                ├── sort keys: [c ASC NULLS LAST, d ASC NULLS LAST, e ASC NULLS LAST]
                └── EvalScalar
                    ├── expressions: [+(t1.a (#0), 1), +(t1.b (#1), 1), +(t2.a (#2), 1)]
                    └── HashJoin
                        ├── join type: INNER
                        ├── build keys: [t2.a (#2)]
                        ├── probe keys: [t1.a (#0)]
                        ├── filters: []
                        ├── Exchange(Build)
                        │   ├── exchange type: Hash(t2.a (#2))
                        │   └── TableScan
                        │       ├── table: default.default.t2
                        │       ├── read rows: 0
                        │       ├── read bytes: 0
                        │       ├── partitions total: 0
                        │       ├── partitions scanned: 0
                        │       ├── push downs: [filters: [], limit: NONE]
                        │       └── output columns: [0]
                        └── Exchange(Probe)
                            ├── exchange type: Hash(t1.a (#0))
                            └── TableScan
                                ├── table: default.default.t1
                                ├── read rows: 0
                                ├── read bytes: 0
                                ├── partitions total: 0
                                ├── partitions scanned: 0
                                └── push downs: [filters: [], limit: NONE]

statement ok
set prefer_broadcast_join = 1;

query T
explain select * from t1 join t2 on t1.a = t2.a;
----
Exchange
├── exchange type: Merge
└── HashJoin
    ├── join type: INNER
    ├── build keys: [t2.a (#2)]
    ├── probe keys: [t1.a (#0)]
    ├── filters: []
    ├── Exchange(Build)
    │   ├── exchange type: Broadcast
    │   └── TableScan
    │       ├── table: default.default.t2
    │       ├── read rows: 0
    │       ├── read bytes: 0
    │       ├── partitions total: 0
    │       ├── partitions scanned: 0
    │       └── push downs: [filters: [], limit: NONE]
    └── Exchange(Probe)
        ├── exchange type: Init-Partition
        └── TableScan
            ├── table: default.default.t1
            ├── read rows: 0
            ├── read bytes: 0
            ├── partitions total: 0
            ├── partitions scanned: 0
            └── push downs: [filters: [], limit: NONE]

statement ok
set prefer_broadcast_join = 0;

query T
explain select * from (SELECT number AS a FROM numbers(10)) x  order by x.a limit 3;
----
Limit
├── limit: 3
├── offset: 0
└── Sort
    ├── sort keys: [number ASC NULLS LAST]
    └── Exchange
        ├── exchange type: Merge
        └── Limit
            ├── limit: 3
            ├── offset: 0
            └── Sort
                ├── sort keys: [number ASC NULLS LAST]
                └── TableScan
                    ├── table: default.system.numbers
                    ├── read rows: 10
                    ├── read bytes: 80
                    ├── partitions total: 1
                    ├── partitions scanned: 1
                    └── push downs: [filters: [], limit: 3]

query T
explain select * from (SELECT number AS a FROM numbers(10)) x right join (SELECT number AS a FROM numbers(5)) y using(a) order by x.a limit 3;
----
Limit
├── limit: 3
├── offset: 0
└── Sort
    ├── sort keys: [number ASC NULLS LAST]
    └── Exchange
        ├── exchange type: Merge
        └── Limit
            ├── limit: 3
            ├── offset: 0
            └── Sort
                ├── sort keys: [number ASC NULLS LAST]
                └── HashJoin
                    ├── join type: RIGHT OUTER
                    ├── build keys: [y.a (#1)]
                    ├── probe keys: [x.a (#0)]
                    ├── filters: []
                    ├── Exchange(Build)
                    │   ├── exchange type: Hash(y.a (#1))
                    │   └── TableScan
                    │       ├── table: default.system.numbers
                    │       ├── read rows: 5
                    │       ├── read bytes: 40
                    │       ├── partitions total: 1
                    │       ├── partitions scanned: 1
                    │       └── push downs: [filters: [], limit: NONE]
                    └── Exchange(Probe)
                        ├── exchange type: Hash(x.a (#0))
                        └── TableScan
                            ├── table: default.system.numbers
                            ├── read rows: 10
                            ├── read bytes: 80
                            ├── partitions total: 1
                            ├── partitions scanned: 1
                            └── push downs: [filters: [], limit: NONE]

statement ok
drop table t1;

statement ok
drop table t2;

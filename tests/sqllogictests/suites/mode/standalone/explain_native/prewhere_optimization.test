statement ok
drop table if exists t_where_optimizer

statement ok
create table if not exists t_where_optimizer (a int, b int)

query T
explain select a from t_where_optimizer where a = 1
----
EvalScalar
├── expressions: [t_where_optimizer.a (#0)]
├── estimated rows: 0.00
└── TableScan
    ├── table: default.default.t_where_optimizer
    ├── read rows: 0
    ├── read bytes: 0
    ├── partitions total: 0
    ├── partitions scanned: 0
    ├── push downs: [filters: [t_where_optimizer.a (#0) = 1], limit: NONE]
    ├── output columns: [a]
    └── estimated rows: 0.00

query T
explain select * from t_where_optimizer where a = b
----
EvalScalar
├── expressions: [t_where_optimizer.a (#0), t_where_optimizer.b (#1)]
├── estimated rows: 0.00
└── TableScan
    ├── table: default.default.t_where_optimizer
    ├── read rows: 0
    ├── read bytes: 0
    ├── partitions total: 0
    ├── partitions scanned: 0
    ├── push downs: [filters: [t_where_optimizer.a (#0) = t_where_optimizer.b (#1)], limit: NONE]
    └── estimated rows: 0.00

query T
explain select * from t_where_optimizer where a = 1 or b > 2
----
EvalScalar
├── expressions: [t_where_optimizer.a (#0), t_where_optimizer.b (#1)]
├── estimated rows: 0.00
└── TableScan
    ├── table: default.default.t_where_optimizer
    ├── read rows: 0
    ├── read bytes: 0
    ├── partitions total: 0
    ├── partitions scanned: 0
    ├── push downs: [filters: [t_where_optimizer.a (#0) = 1 OR t_where_optimizer.b (#1) > 2], limit: NONE]
    └── estimated rows: 0.00

query T
explain select * from t_where_optimizer where a = 1 and b > 2
----
EvalScalar
├── expressions: [t_where_optimizer.a (#0), t_where_optimizer.b (#1)]
├── estimated rows: 0.00
└── TableScan
    ├── table: default.default.t_where_optimizer
    ├── read rows: 0
    ├── read bytes: 0
    ├── partitions total: 0
    ├── partitions scanned: 0
    ├── push downs: [filters: [and_filters(CAST(t_where_optimizer.a (#0) = 1 AS Boolean NULL), CAST(t_where_optimizer.b (#1) > 2 AS Boolean NULL))], limit: NONE]
    └── estimated rows: 0.00

query T
explain select * from t_where_optimizer where b = 1
----
EvalScalar
├── expressions: [t_where_optimizer.a (#0), t_where_optimizer.b (#1)]
├── estimated rows: 0.00
└── TableScan
    ├── table: default.default.t_where_optimizer
    ├── read rows: 0
    ├── read bytes: 0
    ├── partitions total: 0
    ├── partitions scanned: 0
    ├── push downs: [filters: [t_where_optimizer.b (#1) = 1], limit: NONE]
    └── estimated rows: 0.00

query T
explain select a from t_where_optimizer where b = 1
----
EvalScalar
├── expressions: [t_where_optimizer.a (#0)]
├── estimated rows: 0.00
└── TableScan
    ├── table: default.default.t_where_optimizer
    ├── read rows: 0
    ├── read bytes: 0
    ├── partitions total: 0
    ├── partitions scanned: 0
    ├── push downs: [filters: [t_where_optimizer.b (#1) = 1], limit: NONE]
    ├── output columns: [a]
    └── estimated rows: 0.00

statement ok
drop table t_where_optimizer

statement ok
create table t_where_optimizer(id int, s tuple(a int, b int))

query T
explain select * from t_where_optimizer where s:a > 0
----
EvalScalar
├── expressions: [t_where_optimizer.id (#0), t_where_optimizer.s (#1)]
├── estimated rows: 0.00
└── TableScan
    ├── table: default.default.t_where_optimizer
    ├── read rows: 0
    ├── read bytes: 0
    ├── partitions total: 0
    ├── partitions scanned: 0
    ├── push downs: [filters: [t_where_optimizer.s:a (#2) > 0], limit: NONE]
    └── estimated rows: 0.00

statement ok
drop table t_where_optimizer

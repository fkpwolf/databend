query T
explain select t.number from numbers(1) as t, numbers(1) as t1 where t.number = t1.number
----
HashJoin
├── join type: INNER
├── build keys: [t1.number (#1)]
├── probe keys: [t.number (#0)]
├── filters: []
├── TableScan(Build)
│   ├── table: default.system.numbers
│   ├── read rows: 1
│   ├── read bytes: 8
│   ├── partitions total: 1
│   ├── partitions scanned: 1
│   └── push downs: [filters: [], limit: NONE]
└── TableScan(Probe)
    ├── table: default.system.numbers
    ├── read rows: 1
    ├── read bytes: 8
    ├── partitions total: 1
    ├── partitions scanned: 1
    └── push downs: [filters: [], limit: NONE]

query T
explain select t.number from numbers(1) as t, numbers(1) as t1 where t.number = t1.number and t.number = t1.number + 1
----
HashJoin
├── join type: INNER
├── build keys: [t1.number (#1), +(t1.number (#1), 1)]
├── probe keys: [t.number (#0), t.number (#0)]
├── filters: []
├── TableScan(Build)
│   ├── table: default.system.numbers
│   ├── read rows: 1
│   ├── read bytes: 8
│   ├── partitions total: 1
│   ├── partitions scanned: 1
│   └── push downs: [filters: [], limit: NONE]
└── TableScan(Probe)
    ├── table: default.system.numbers
    ├── read rows: 1
    ├── read bytes: 8
    ├── partitions total: 1
    ├── partitions scanned: 1
    └── push downs: [filters: [], limit: NONE]

query T
explain select t.number from numbers(1) as t, numbers(1) as t1 where t.number > 1 and 1 < t1.number
----
HashJoin
├── join type: CROSS
├── build keys: []
├── probe keys: []
├── filters: []
├── Filter(Build)
│   ├── filters: [<(1, t1.number (#1))]
│   └── TableScan
│       ├── table: default.system.numbers
│       ├── read rows: 1
│       ├── read bytes: 8
│       ├── partitions total: 1
│       ├── partitions scanned: 1
│       └── push downs: [filters: [(1 < number)], limit: NONE]
└── Filter(Probe)
    ├── filters: [>(t.number (#0), 1)]
    └── TableScan
        ├── table: default.system.numbers
        ├── read rows: 1
        ├── read bytes: 8
        ├── partitions total: 1
        ├── partitions scanned: 1
        └── push downs: [filters: [(number > 1)], limit: NONE]

query T
explain select t.number from numbers(1) as t, numbers(1) as t1 where t.number + t1.number = 1
----
Filter
├── filters: [=(+(t.number (#0), t1.number (#1)), 1)]
└── HashJoin
    ├── join type: CROSS
    ├── build keys: []
    ├── probe keys: []
    ├── filters: []
    ├── TableScan(Build)
    │   ├── table: default.system.numbers
    │   ├── read rows: 1
    │   ├── read bytes: 8
    │   ├── partitions total: 1
    │   ├── partitions scanned: 1
    │   └── push downs: [filters: [], limit: NONE]
    └── TableScan(Probe)
        ├── table: default.system.numbers
        ├── read rows: 1
        ├── read bytes: 8
        ├── partitions total: 1
        ├── partitions scanned: 1
        └── push downs: [filters: [], limit: NONE]


query T
explain select t.number from numbers(1) as t, numbers(1) as t1, numbers(1) as t2 where t1.number = t2.number and t.number = 1
----
HashJoin
├── join type: INNER
├── build keys: [t1.number (#1)]
├── probe keys: [t2.number (#2)]
├── filters: []
├── HashJoin(Build)
│   ├── join type: CROSS
│   ├── build keys: []
│   ├── probe keys: []
│   ├── filters: []
│   ├── Filter(Build)
│   │   ├── filters: [=(t.number (#0), 1)]
│   │   └── TableScan
│   │       ├── table: default.system.numbers
│   │       ├── read rows: 1
│   │       ├── read bytes: 8
│   │       ├── partitions total: 1
│   │       ├── partitions scanned: 1
│   │       └── push downs: [filters: [(number = 1)], limit: NONE]
│   └── TableScan(Probe)
│       ├── table: default.system.numbers
│       ├── read rows: 1
│       ├── read bytes: 8
│       ├── partitions total: 1
│       ├── partitions scanned: 1
│       └── push downs: [filters: [], limit: NONE]
└── TableScan(Probe)
    ├── table: default.system.numbers
    ├── read rows: 1
    ├── read bytes: 8
    ├── partitions total: 1
    ├── partitions scanned: 1
    └── push downs: [filters: [], limit: NONE]

## check outer join is converted to inner join

statement ok
drop table if exists onecolumn

statement ok
CREATE TABLE onecolumn (x INT NULL)

statement ok
INSERT INTO onecolumn(x) VALUES (44), (NULL), (42), (42)

statement ok
drop table if exists twocolumn

statement ok
CREATE TABLE twocolumn (x INT NULL, y INT NULL)

statement ok
INSERT INTO twocolumn(x, y) VALUES (44,51), (NULL,52), (42,53), (45,45)

query T
explain select * from onecolumn as a left join twocolumn as b on a.x = b.x where b.x > 42
----
HashJoin
├── join type: INNER
├── build keys: [b.x (#1)]
├── probe keys: [a.x (#0)]
├── filters: []
├── Filter(Build)
│   ├── filters: [>(b.x (#1), 42)]
│   └── TableScan
│       ├── table: default.default.twocolumn
│       ├── read rows: 4
│       ├── read bytes: 79
│       ├── partitions total: 1
│       ├── partitions scanned: 1
│       └── push downs: [filters: [(x > 42)], limit: NONE]
└── TableScan(Probe)
    ├── table: default.default.onecolumn
    ├── read rows: 4
    ├── read bytes: 37
    ├── partitions total: 1
    ├── partitions scanned: 1
    └── push downs: [filters: [], limit: NONE]

query T
explain select * from onecolumn as a left join twocolumn as b on a.x = b.x where b.x > 44 or b.x < 43
----
HashJoin
├── join type: INNER
├── build keys: [b.x (#1)]
├── probe keys: [a.x (#0)]
├── filters: []
├── Filter(Build)
│   ├── filters: [or(>(b.x (#1), 44), <(b.x (#1), 43))]
│   └── TableScan
│       ├── table: default.default.twocolumn
│       ├── read rows: 4
│       ├── read bytes: 79
│       ├── partitions total: 1
│       ├── partitions scanned: 1
│       └── push downs: [filters: [((x > 44) or (x < 43))], limit: NONE]
└── TableScan(Probe)
    ├── table: default.default.onecolumn
    ├── read rows: 4
    ├── read bytes: 37
    ├── partitions total: 1
    ├── partitions scanned: 1
    └── push downs: [filters: [], limit: NONE]


query T
explain select * from onecolumn as a left join twocolumn as b on a.x = b.x where b.x > 42 and b.x < 45
----
HashJoin
├── join type: INNER
├── build keys: [b.x (#1)]
├── probe keys: [a.x (#0)]
├── filters: []
├── Filter(Build)
│   ├── filters: [>(b.x (#1), 42), <(b.x (#1), 45)]
│   └── TableScan
│       ├── table: default.default.twocolumn
│       ├── read rows: 4
│       ├── read bytes: 79
│       ├── partitions total: 1
│       ├── partitions scanned: 1
│       └── push downs: [filters: [(x > 42), (x < 45)], limit: NONE]
└── TableScan(Probe)
    ├── table: default.default.onecolumn
    ├── read rows: 4
    ├── read bytes: 37
    ├── partitions total: 1
    ├── partitions scanned: 1
    └── push downs: [filters: [], limit: NONE]

## the following cases won't be converted to inner join

query T
explain select * from onecolumn as a left join twocolumn as b on a.x = b.x where b.x > 44 or a.x < 43
----
Filter
├── filters: [or(>(b.x (#1), 44), <(a.x (#0), 43))]
└── HashJoin
    ├── join type: LEFT OUTER
    ├── build keys: [b.x (#1)]
    ├── probe keys: [a.x (#0)]
    ├── filters: []
    ├── TableScan(Build)
    │   ├── table: default.default.twocolumn
    │   ├── read rows: 4
    │   ├── read bytes: 79
    │   ├── partitions total: 1
    │   ├── partitions scanned: 1
    │   └── push downs: [filters: [], limit: NONE]
    └── TableScan(Probe)
        ├── table: default.default.onecolumn
        ├── read rows: 4
        ├── read bytes: 37
        ├── partitions total: 1
        ├── partitions scanned: 1
        └── push downs: [filters: [], limit: NONE]

query T
explain select * from onecolumn as a right join twocolumn as b on a.x = b.x where b.x > 42 and b.x < 45
----
HashJoin
├── join type: RIGHT OUTER
├── build keys: [b.x (#1)]
├── probe keys: [a.x (#0)]
├── filters: []
├── Filter(Build)
│   ├── filters: [>(b.x (#1), 42), <(b.x (#1), 45)]
│   └── TableScan
│       ├── table: default.default.twocolumn
│       ├── read rows: 4
│       ├── read bytes: 79
│       ├── partitions total: 1
│       ├── partitions scanned: 1
│       └── push downs: [filters: [(x > 42), (x < 45)], limit: NONE]
└── TableScan(Probe)
    ├── table: default.default.onecolumn
    ├── read rows: 4
    ├── read bytes: 37
    ├── partitions total: 1
    ├── partitions scanned: 1
    └── push downs: [filters: [], limit: NONE]

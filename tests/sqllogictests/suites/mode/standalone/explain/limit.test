query T
explain select * from (select t.number from numbers(10) as t limit 8) limit 9
----
Limit
├── limit: 9
├── offset: 0
└── Limit
    ├── limit: 8
    ├── offset: 0
    └── TableScan
        ├── table: default.system.numbers
        ├── read rows: 8
        ├── read bytes: 64
        ├── partitions total: 1
        ├── partitions scanned: 1
        └── push downs: [filters: [], limit: 8]

query T
explain select * from (select t.number from numbers(10) as t order by number desc) order by number asc
----
Sort
├── sort keys: [number ASC NULLS LAST]
└── Sort
    ├── sort keys: [number DESC NULLS LAST]
    └── TableScan
        ├── table: default.system.numbers
        ├── read rows: 10
        ├── read bytes: 80
        ├── partitions total: 1
        ├── partitions scanned: 1
        └── push downs: [filters: [], limit: NONE]

query T
explain select number from (select t.number from numbers(10) as t order by number desc limit 8) order by number asc limit 9
----
Limit
├── limit: 9
├── offset: 0
└── Sort
    ├── sort keys: [number ASC NULLS LAST]
    └── Limit
        ├── limit: 8
        ├── offset: 0
        └── Sort
            ├── sort keys: [number DESC NULLS LAST]
            └── TableScan
                ├── table: default.system.numbers
                ├── read rows: 10
                ├── read bytes: 80
                ├── partitions total: 1
                ├── partitions scanned: 1
                └── push downs: [filters: [], limit: 8]

query T
explain select t.number from numbers(1) as t, numbers(1) as t1 where t.number = (select count(*) from numbers(1) as t2, numbers(1) as t3 where t.number = t2.number) group by t.number order by t.number desc limit 3
----
Limit
├── limit: 3
├── offset: 0
└── Sort
    ├── sort keys: [number DESC NULLS LAST]
    └── AggregateFinal
        ├── group by: [number]
        ├── aggregate functions: []
        └── AggregatePartial
            ├── group by: [number]
            ├── aggregate functions: []
            └── Filter
                ├── filters: [=(t.number (#0), CAST(if(is_not_null(scalar_subquery_4 (#4)), scalar_subquery_4 (#4), 0) AS BIGINT UNSIGNED))]
                └── HashJoin
                    ├── join type: SINGLE
                    ├── build keys: [subquery_2 (#2)]
                    ├── probe keys: [subquery_0 (#0)]
                    ├── filters: []
                    ├── EvalScalar(Build)
                    │   ├── expressions: [COUNT(*) (#5)]
                    │   └── AggregateFinal
                    │       ├── group by: [number]
                    │       ├── aggregate functions: [count()]
                    │       └── AggregatePartial
                    │           ├── group by: [number]
                    │           ├── aggregate functions: [count()]
                    │           └── HashJoin
                    │               ├── join type: CROSS
                    │               ├── build keys: []
                    │               ├── probe keys: []
                    │               ├── filters: []
                    │               ├── Filter(Build)
                    │               │   ├── filters: [=(subquery_2 (#2), t2.number (#2))]
                    │               │   └── TableScan
                    │               │       ├── table: default.system.numbers
                    │               │       ├── read rows: 1
                    │               │       ├── read bytes: 8
                    │               │       ├── partitions total: 1
                    │               │       ├── partitions scanned: 1
                    │               │       └── push downs: [filters: [(number = number)], limit: NONE]
                    │               └── TableScan(Probe)
                    │                   ├── table: default.system.numbers
                    │                   ├── read rows: 1
                    │                   ├── read bytes: 8
                    │                   ├── partitions total: 1
                    │                   ├── partitions scanned: 1
                    │                   └── push downs: [filters: [], limit: NONE]
                    └── HashJoin(Probe)
                        ├── join type: CROSS
                        ├── build keys: []
                        ├── probe keys: []
                        ├── filters: []
                        ├── TableScan(Build)
                        │   ├── table: default.system.numbers
                        │   ├── read rows: 1
                        │   ├── read bytes: 8
                        │   ├── partitions total: 1
                        │   ├── partitions scanned: 1
                        │   └── push downs: [filters: [], limit: NONE]
                        └── TableScan(Probe)
                            ├── table: default.system.numbers
                            ├── read rows: 1
                            ├── read bytes: 8
                            ├── partitions total: 1
                            ├── partitions scanned: 1
                            └── push downs: [filters: [], limit: NONE]

query T
explain select * from (select count(t1.number) as c1 from numbers(1) as t1 group by number) as t3 left join (select count(t.number) as c from numbers(2) as t group by number) as t4 on t3.c1=t4.c order by t3.c1 limit 1
----
Limit
├── limit: 1
├── offset: 0
└── Sort
    ├── sort keys: [c1 ASC NULLS LAST]
    └── HashJoin
        ├── join type: RIGHT OUTER
        ├── build keys: [CAST(t3.c1 (#1) AS BIGINT UNSIGNED NULL)]
        ├── probe keys: [CAST(t4.c (#5) AS BIGINT UNSIGNED NULL)]
        ├── filters: []
        ├── EvalScalar(Build)
        │   ├── expressions: [count(t1.number) (#3)]
        │   └── AggregateFinal
        │       ├── group by: [number]
        │       ├── aggregate functions: [count(number)]
        │       └── AggregatePartial
        │           ├── group by: [number]
        │           ├── aggregate functions: [count(number)]
        │           └── TableScan
        │               ├── table: default.system.numbers
        │               ├── read rows: 1
        │               ├── read bytes: 8
        │               ├── partitions total: 1
        │               ├── partitions scanned: 1
        │               └── push downs: [filters: [], limit: NONE]
        └── EvalScalar(Probe)
            ├── expressions: [count(t.number) (#7)]
            └── AggregateFinal
                ├── group by: [number]
                ├── aggregate functions: [count(number)]
                └── AggregatePartial
                    ├── group by: [number]
                    ├── aggregate functions: [count(number)]
                    └── TableScan
                        ├── table: default.system.numbers
                        ├── read rows: 2
                        ├── read bytes: 16
                        ├── partitions total: 1
                        ├── partitions scanned: 1
                        └── push downs: [filters: [], limit: NONE]

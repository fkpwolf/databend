query T
explain select * from (select a from (select number as a, number + 1 as b from numbers(1)))
----
TableScan
├── table: default.system.numbers
├── read rows: 1
├── read bytes: 8
├── partitions total: 1
├── partitions scanned: 1
├── push downs: [filters: [], limit: NONE]
└── estimated rows: 1.00

query T
explain select a from (select number as a, count(*) as b from numbers(1) group by a)
----
AggregateFinal
├── group by: [number]
├── aggregate functions: []
├── estimated rows: 1.00
└── AggregatePartial
    ├── group by: [number]
    ├── aggregate functions: []
    ├── estimated rows: 1.00
    └── TableScan
        ├── table: default.system.numbers
        ├── read rows: 1
        ├── read bytes: 8
        ├── partitions total: 1
        ├── partitions scanned: 1
        ├── push downs: [filters: [], limit: NONE]
        └── estimated rows: 1.00

query T
explain select a from (select number as a, number b, sum(number) as c, number as d, number as e from numbers(1) group by a, b, d, e) where b > 1 order by d limit 1
----
Limit
├── limit: 1
├── offset: 0
├── estimated rows: 0.33
└── Sort
    ├── sort keys: [number ASC NULLS LAST]
    ├── estimated rows: 0.33
    └── Filter
        ├── filters: [gt(numbers.b (#0), to_uint64(1_u8))]
        ├── estimated rows: 0.33
        └── AggregateFinal
            ├── group by: [number, number, number, number]
            ├── aggregate functions: []
            ├── estimated rows: 1.00
            └── AggregatePartial
                ├── group by: [number, number, number, number]
                ├── aggregate functions: []
                ├── estimated rows: 1.00
                └── TableScan
                    ├── table: default.system.numbers
                    ├── read rows: 1
                    ├── read bytes: 8
                    ├── partitions total: 1
                    ├── partitions scanned: 1
                    ├── push downs: [filters: [], limit: NONE]
                    └── estimated rows: 1.00

query T
explain select * from (select t1.a from (select number + 1 as a, number + 1 as b, number + 1 as c, number + 1 as d from numbers(1)) as t1, (select number + 1 as a, number + 1 as b, number + 1 as c from numbers(1)) as t2 where t1.b = t2.b and t1.c = 1)
----
HashJoin
├── join type: INNER
├── build keys: [t1.b (#2)]
├── probe keys: [t2.b (#11)]
├── filters: []
├── estimated rows: 0.33
├── Filter(Build)
│   ├── filters: [eq(t1.c (#3), to_uint64(1_u8))]
│   ├── estimated rows: 0.33
│   └── EvalScalar
│       ├── expressions: [plus(numbers.number (#0), 1_u8), plus(numbers.number (#0), 1_u8), plus(numbers.number (#0), 1_u8)]
│       ├── estimated rows: 1.00
│       └── TableScan
│           ├── table: default.system.numbers
│           ├── read rows: 1
│           ├── read bytes: 8
│           ├── partitions total: 1
│           ├── partitions scanned: 1
│           ├── push downs: [filters: [], limit: NONE]
│           └── estimated rows: 1.00
└── EvalScalar(Probe)
    ├── expressions: [plus(numbers.number (#9), 1_u8)]
    ├── estimated rows: 1.00
    └── TableScan
        ├── table: default.system.numbers
        ├── read rows: 1
        ├── read bytes: 8
        ├── partitions total: 1
        ├── partitions scanned: 1
        ├── push downs: [filters: [], limit: NONE]
        └── estimated rows: 1.00

query T
explain select t1.a from (select number + 1 as a, number + 1 as b from numbers(1)) as t1 where t1.a = (select count(*) from (select t2.a, t3.a from (select number + 1 as a, number + 1 as b, number + 1 as c, number + 1 as d from numbers(1)) as t2, (select number + 1 as a, number + 1 as b, number + 1 as c from numbers(1)) as t3 where t2.b = t3.b and t2.c = 1))
----
Filter
├── filters: [eq(CAST(t1.a (#1) AS UInt64 NULL), scalar_subquery_21 (#21))]
├── estimated rows: 0.33
└── HashJoin
    ├── join type: SINGLE
    ├── build keys: []
    ├── probe keys: []
    ├── filters: []
    ├── estimated rows: 1.00
    ├── EvalScalar(Build)
    │   ├── expressions: [COUNT(*) (#22)]
    │   ├── estimated rows: 1.00
    │   └── AggregateFinal
    │       ├── group by: []
    │       ├── aggregate functions: [count()]
    │       ├── estimated rows: 1.00
    │       └── AggregatePartial
    │           ├── group by: []
    │           ├── aggregate functions: [count()]
    │           ├── estimated rows: 1.00
    │           └── HashJoin
    │               ├── join type: INNER
    │               ├── build keys: [t2.b (#7)]
    │               ├── probe keys: [t3.b (#16)]
    │               ├── filters: []
    │               ├── estimated rows: 0.33
    │               ├── Filter(Build)
    │               │   ├── filters: [eq(t2.c (#8), to_uint64(1_u8))]
    │               │   ├── estimated rows: 0.33
    │               │   └── EvalScalar
    │               │       ├── expressions: [plus(numbers.number (#5), 1_u8), plus(numbers.number (#5), 1_u8)]
    │               │       ├── estimated rows: 1.00
    │               │       └── TableScan
    │               │           ├── table: default.system.numbers
    │               │           ├── read rows: 1
    │               │           ├── read bytes: 8
    │               │           ├── partitions total: 1
    │               │           ├── partitions scanned: 1
    │               │           ├── push downs: [filters: [], limit: NONE]
    │               │           └── estimated rows: 1.00
    │               └── EvalScalar(Probe)
    │                   ├── expressions: [plus(numbers.number (#14), 1_u8)]
    │                   ├── estimated rows: 1.00
    │                   └── TableScan
    │                       ├── table: default.system.numbers
    │                       ├── read rows: 1
    │                       ├── read bytes: 8
    │                       ├── partitions total: 1
    │                       ├── partitions scanned: 1
    │                       ├── push downs: [filters: [], limit: NONE]
    │                       └── estimated rows: 1.00
    └── EvalScalar(Probe)
        ├── expressions: [plus(numbers.number (#0), 1_u8)]
        ├── estimated rows: 1.00
        └── TableScan
            ├── table: default.system.numbers
            ├── read rows: 1
            ├── read bytes: 8
            ├── partitions total: 1
            ├── partitions scanned: 1
            ├── push downs: [filters: [], limit: NONE]
            └── estimated rows: 1.00

query T
explain select name from system.functions order by example
----
Sort
├── sort keys: [example ASC NULLS LAST]
├── estimated rows: 0.00
└── TableScan
    ├── table: default.system.functions
    ├── read rows: 0
    ├── read bytes: 0
    ├── partitions total: 0
    ├── partitions scanned: 0
    ├── push downs: [filters: [], limit: NONE]
    └── estimated rows: 0.00

query T
explain select t.number from numbers(10) t where exists(select * from numbers(10))
----
HashJoin
├── join type: CROSS
├── build keys: []
├── probe keys: []
├── filters: []
├── estimated rows: 3.33
├── Filter(Build)
│   ├── filters: [eq(count(*) (#2), 1_u64)]
│   ├── estimated rows: 0.33
│   └── AggregateFinal
│       ├── group by: []
│       ├── aggregate functions: [count()]
│       ├── estimated rows: 1.00
│       └── AggregatePartial
│           ├── group by: []
│           ├── aggregate functions: [count()]
│           ├── estimated rows: 1.00
│           └── Limit
│               ├── limit: 1
│               ├── offset: 0
│               ├── estimated rows: 1.00
│               └── TableScan
│                   ├── table: default.system.numbers
│                   ├── read rows: 1
│                   ├── read bytes: 8
│                   ├── partitions total: 1
│                   ├── partitions scanned: 1
│                   ├── push downs: [filters: [], limit: 1]
│                   └── estimated rows: 10.00
└── TableScan(Probe)
    ├── table: default.system.numbers
    ├── read rows: 10
    ├── read bytes: 80
    ├── partitions total: 1
    ├── partitions scanned: 1
    ├── push downs: [filters: [], limit: NONE]
    └── estimated rows: 10.00


statement ok
drop table if exists t

statement ok
create table t(a int, b int)

statement ok
insert into t values(1, 2), (2, 3)

query T
explain select count(*) from t where t.b = 2
----
EvalScalar
├── expressions: [COUNT(*) (#3)]
├── estimated rows: 1.00
└── AggregateFinal
    ├── group by: []
    ├── aggregate functions: [count()]
    ├── estimated rows: 1.00
    └── AggregatePartial
        ├── group by: []
        ├── aggregate functions: [count()]
        ├── estimated rows: 1.00
        └── Filter
            ├── filters: [eq(t.b (#1), to_int32(2_u8))]
            ├── estimated rows: 0.67
            └── TableScan
                ├── table: default.default.t
                ├── read rows: 2
                ├── read bytes: 39
                ├── partitions total: 1
                ├── partitions scanned: 1
                ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 1 to 1>]
                ├── push downs: [filters: [eq(t.b (#1), 2_i32)], limit: NONE]
                ├── output columns: [1]
                └── estimated rows: 2.00

statement ok
drop table t

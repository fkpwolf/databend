statement ok
drop table if exists t1;

statement ok
create table t1 (s varchar);

statement ok
insert into t1 values('abcde'), ('abce'), ('abcd['), ('abcd');

query T
select * from t1 where s like 'abcd%' order by s;
----
abcd
abcd[
abcde

query T
explain select * from t1 where s like 'abcd%' order by s;
----
EvalScalar
├── expressions: [t1.s (#0)]
├── estimated rows: 0.04
└── Sort
    ├── sort keys: [s ASC NULLS LAST]
    ├── estimated rows: 0.04
    └── Filter
        ├── filters: [t1.s (#0) >= 'abcd', t1.s (#0) < 'abce']
        ├── estimated rows: 0.04
        └── TableScan
            ├── table: default.default.t1
            ├── read rows: 4
            ├── read bytes: 61
            ├── partitions total: 1
            ├── partitions scanned: 1
            ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 0 to 0>]
            ├── push downs: [filters: [and_filters(CAST(t1.s (#0) >= 'abcd' AS Boolean NULL), CAST(t1.s (#0) < 'abce' AS Boolean NULL))], limit: NONE]
            └── estimated rows: 4.00

query T
select * from t1 where s like 'abcd' order by s;
----
abcd

query T
explain select * from t1 where s like 'abcd' order by s;
----
EvalScalar
├── expressions: [t1.s (#0)]
├── estimated rows: 1.00
└── Sort
    ├── sort keys: [s ASC NULLS LAST]
    ├── estimated rows: 1.00
    └── Filter
        ├── filters: [t1.s (#0) = 'abcd']
        ├── estimated rows: 1.00
        └── TableScan
            ├── table: default.default.t1
            ├── read rows: 4
            ├── read bytes: 61
            ├── partitions total: 1
            ├── partitions scanned: 1
            ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 1 to 1>]
            ├── push downs: [filters: [t1.s (#0) = 'abcd'], limit: NONE]
            └── estimated rows: 4.00

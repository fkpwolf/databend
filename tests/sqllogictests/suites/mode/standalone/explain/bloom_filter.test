# This case depends on explain(standalone mode), thus we put it here
statement ok
create table bloom_test_t(c1 int, c2 int)

# create 2 data blocks, min/max values of columns are of the same

statement ok
insert into  bloom_test_t values(1,1), (5,6), (10,10)

statement ok
insert into  bloom_test_t values(1,1), (7,8), (10,10)

# range index is not effective in this query, bloom filter will be used, one block should be pruned
query T
explain select * from bloom_test_t where c1 = 5
----
 Filter
 ├── filters: [eq(bloom_test_t.c1 (#0), to_int32(5_u8))]
 ├── estimated rows: 1.20
 └── TableScan
     ├── table: default.default.bloom_test_t
     ├── read rows: 3
     ├── read bytes: 86
     ├── partitions total: 2
     ├── partitions scanned: 1
     ├── pruning stats: [segments: <range pruning: 2 to 2>, blocks: <range pruning: 2 to 2, bloom pruning: 2 to 1>]
     ├── push downs: [filters: [eq(bloom_test_t.c1 (#0), 5_i32)], limit: NONE]
     └── estimated rows: 6.00

query T
select * from bloom_test_t where c1 = 5
----
5 6

# for issue which addressed in PR #9706 (https://github.com/datafuselabs/databend/pull/9706)
#
# if cached filters are populated incorrectly by using the wrong cache key:
# - instead of the correct one ${block_id}-${column_id}
# - but ${block_id} incorrectly
# the cached filter that populated by the previous query
# `select * from bloom_test_t where c1 = 5`
# i.e. the bloom filter of block 1, column c1, will be used in bloom pruning of
# ALL the columns of block number 1

# recall that
# a) the data of first block is
#  `create table bloom_test_t(c1 int, c2 int)`
#  `insert into  bloom_test_t values(1,1), (5,6), (10,10)`
# b) range index is not effective in the later test cases
# c) if filter cache is populated incorrectly (as described in PR #9706)
#    bloom filter of block 1, column c1 will be used for all the columns (of block 1)
# let's check it out

# 1. filter using another column (c2), of the same block, where there is one row matched

# 1.1 check that filtering on column c2 does work as expected
query T
select * from bloom_test_t where c2 = 6
----
5 6

# 1.2 check that if incorrect filtering is applied, an empty result set will be returned
query T
select count(*) from bloom_test_t where c1 = 6
----
0

# 2. filtering on column c2, of the same block, where there is no row matched
# 2.1 check that an empty result set returned
query T
select count(*) from bloom_test_t where c2 = 5
----
0

# 2.2 check that if incorrect filtering is applied, a non-empty result set will be returned
query T
select count(*) from bloom_test_t where c1 = 5
----
1

statement ok
drop table bloom_test_t


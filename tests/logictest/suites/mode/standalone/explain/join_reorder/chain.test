statement ok
drop database if exists join_reorder;

statement ok
create database join_reorder;

statement ok
use join_reorder;

statement ok
create table t as select number as a from numbers(1);

statement ok
create table t1 as select number as a from numbers(10);

statement ok
create table t2 as select number as a from numbers(100);

statement query T
explain select * from t, t1, t2 where t.a = t1.a and t1.a = t2.a;

----
HashJoin
├── join type: INNER
├── build keys: [t1.a (#1)]
├── probe keys: [t2.a (#2)]
├── filters: []
├── HashJoin(Build)
│   ├── join type: INNER
│   ├── build keys: [t.a (#0)]
│   ├── probe keys: [t1.a (#1)]
│   ├── filters: []
│   ├── TableScan(Build)
│   │   ├── table: default.join_reorder.t
│   │   ├── read rows: 1
│   │   ├── read bytes: 31
│   │   ├── partitions total: 1
│   │   ├── partitions scanned: 1
│   │   └── push downs: [filters: [], limit: NONE]
│   └── TableScan(Probe)
│       ├── table: default.join_reorder.t1
│       ├── read rows: 10
│       ├── read bytes: 68
│       ├── partitions total: 1
│       ├── partitions scanned: 1
│       └── push downs: [filters: [], limit: NONE]
└── TableScan(Probe)
    ├── table: default.join_reorder.t2
    ├── read rows: 100
    ├── read bytes: 431
    ├── partitions total: 1
    ├── partitions scanned: 1
    └── push downs: [filters: [], limit: NONE]

statement query T
explain select * from t, t2, t1 where t.a = t1.a and t1.a = t2.a;

----
HashJoin
├── join type: INNER
├── build keys: [t1.a (#2), t1.a (#2)]
├── probe keys: [t.a (#0), t2.a (#1)]
├── filters: []
├── TableScan(Build)
│   ├── table: default.join_reorder.t1
│   ├── read rows: 10
│   ├── read bytes: 68
│   ├── partitions total: 1
│   ├── partitions scanned: 1
│   └── push downs: [filters: [], limit: NONE]
└── HashJoin(Probe)
    ├── join type: CROSS
    ├── build keys: []
    ├── probe keys: []
    ├── filters: []
    ├── TableScan(Build)
    │   ├── table: default.join_reorder.t
    │   ├── read rows: 1
    │   ├── read bytes: 31
    │   ├── partitions total: 1
    │   ├── partitions scanned: 1
    │   └── push downs: [filters: [], limit: NONE]
    └── TableScan(Probe)
        ├── table: default.join_reorder.t2
        ├── read rows: 100
        ├── read bytes: 431
        ├── partitions total: 1
        ├── partitions scanned: 1
        └── push downs: [filters: [], limit: NONE]

statement query T
explain select * from t1, t, t2 where t.a = t1.a and t1.a = t2.a;

----
HashJoin
├── join type: INNER
├── build keys: [t1.a (#0)]
├── probe keys: [t2.a (#2)]
├── filters: []
├── HashJoin(Build)
│   ├── join type: INNER
│   ├── build keys: [t.a (#1)]
│   ├── probe keys: [t1.a (#0)]
│   ├── filters: []
│   ├── TableScan(Build)
│   │   ├── table: default.join_reorder.t
│   │   ├── read rows: 1
│   │   ├── read bytes: 31
│   │   ├── partitions total: 1
│   │   ├── partitions scanned: 1
│   │   └── push downs: [filters: [], limit: NONE]
│   └── TableScan(Probe)
│       ├── table: default.join_reorder.t1
│       ├── read rows: 10
│       ├── read bytes: 68
│       ├── partitions total: 1
│       ├── partitions scanned: 1
│       └── push downs: [filters: [], limit: NONE]
└── TableScan(Probe)
    ├── table: default.join_reorder.t2
    ├── read rows: 100
    ├── read bytes: 431
    ├── partitions total: 1
    ├── partitions scanned: 1
    └── push downs: [filters: [], limit: NONE]

statement query T
explain select * from t1, t2, t where t.a = t1.a and t1.a = t2.a;

----
HashJoin
├── join type: INNER
├── build keys: [t1.a (#0)]
├── probe keys: [t2.a (#1)]
├── filters: []
├── HashJoin(Build)
│   ├── join type: INNER
│   ├── build keys: [t.a (#2)]
│   ├── probe keys: [t1.a (#0)]
│   ├── filters: []
│   ├── TableScan(Build)
│   │   ├── table: default.join_reorder.t
│   │   ├── read rows: 1
│   │   ├── read bytes: 31
│   │   ├── partitions total: 1
│   │   ├── partitions scanned: 1
│   │   └── push downs: [filters: [], limit: NONE]
│   └── TableScan(Probe)
│       ├── table: default.join_reorder.t1
│       ├── read rows: 10
│       ├── read bytes: 68
│       ├── partitions total: 1
│       ├── partitions scanned: 1
│       └── push downs: [filters: [], limit: NONE]
└── TableScan(Probe)
    ├── table: default.join_reorder.t2
    ├── read rows: 100
    ├── read bytes: 431
    ├── partitions total: 1
    ├── partitions scanned: 1
    └── push downs: [filters: [], limit: NONE]

statement query T
explain select * from t2, t1, t where t.a = t1.a and t1.a = t2.a;

----
HashJoin
├── join type: INNER
├── build keys: [t1.a (#1)]
├── probe keys: [t2.a (#0)]
├── filters: []
├── HashJoin(Build)
│   ├── join type: INNER
│   ├── build keys: [t.a (#2)]
│   ├── probe keys: [t1.a (#1)]
│   ├── filters: []
│   ├── TableScan(Build)
│   │   ├── table: default.join_reorder.t
│   │   ├── read rows: 1
│   │   ├── read bytes: 31
│   │   ├── partitions total: 1
│   │   ├── partitions scanned: 1
│   │   └── push downs: [filters: [], limit: NONE]
│   └── TableScan(Probe)
│       ├── table: default.join_reorder.t1
│       ├── read rows: 10
│       ├── read bytes: 68
│       ├── partitions total: 1
│       ├── partitions scanned: 1
│       └── push downs: [filters: [], limit: NONE]
└── TableScan(Probe)
    ├── table: default.join_reorder.t2
    ├── read rows: 100
    ├── read bytes: 431
    ├── partitions total: 1
    ├── partitions scanned: 1
    └── push downs: [filters: [], limit: NONE]

statement query T
explain select * from t2, t, t1 where t.a = t1.a and t1.a = t2.a;

----
HashJoin
├── join type: INNER
├── build keys: [t1.a (#2), t1.a (#2)]
├── probe keys: [t.a (#1), t2.a (#0)]
├── filters: []
├── TableScan(Build)
│   ├── table: default.join_reorder.t1
│   ├── read rows: 10
│   ├── read bytes: 68
│   ├── partitions total: 1
│   ├── partitions scanned: 1
│   └── push downs: [filters: [], limit: NONE]
└── HashJoin(Probe)
    ├── join type: CROSS
    ├── build keys: []
    ├── probe keys: []
    ├── filters: []
    ├── TableScan(Build)
    │   ├── table: default.join_reorder.t
    │   ├── read rows: 1
    │   ├── read bytes: 31
    │   ├── partitions total: 1
    │   ├── partitions scanned: 1
    │   └── push downs: [filters: [], limit: NONE]
    └── TableScan(Probe)
        ├── table: default.join_reorder.t2
        ├── read rows: 100
        ├── read bytes: 431
        ├── partitions total: 1
        ├── partitions scanned: 1
        └── push downs: [filters: [], limit: NONE]

statement query T
explain select * from t left join t1 on t1.a = t.a;

----
HashJoin
├── join type: RIGHT OUTER
├── build keys: [CAST(t.a (#0) AS BIGINT UNSIGNED NULL)]
├── probe keys: [CAST(t1.a (#1) AS BIGINT UNSIGNED NULL)]
├── filters: []
├── TableScan(Build)
│   ├── table: default.join_reorder.t
│   ├── read rows: 1
│   ├── read bytes: 31
│   ├── partitions total: 1
│   ├── partitions scanned: 1
│   └── push downs: [filters: [], limit: NONE]
└── TableScan(Probe)
    ├── table: default.join_reorder.t1
    ├── read rows: 10
    ├── read bytes: 68
    ├── partitions total: 1
    ├── partitions scanned: 1
    └── push downs: [filters: [], limit: NONE]

statement query T
explain select * from t right join t1 on t1.a = t.a;

----
HashJoin
├── join type: LEFT OUTER
├── build keys: [CAST(t.a (#0) AS BIGINT UNSIGNED NULL)]
├── probe keys: [CAST(t1.a (#1) AS BIGINT UNSIGNED NULL)]
├── filters: []
├── TableScan(Build)
│   ├── table: default.join_reorder.t
│   ├── read rows: 1
│   ├── read bytes: 31
│   ├── partitions total: 1
│   ├── partitions scanned: 1
│   └── push downs: [filters: [], limit: NONE]
└── TableScan(Probe)
    ├── table: default.join_reorder.t1
    ├── read rows: 10
    ├── read bytes: 68
    ├── partitions total: 1
    ├── partitions scanned: 1
    └── push downs: [filters: [], limit: NONE]

statement query T
explain select * from t left semi join t1 on t1.a = t.a;

----
HashJoin
├── join type: RIGHT SEMI
├── build keys: [t.a (#0)]
├── probe keys: [t1.a (#1)]
├── filters: []
├── TableScan(Build)
│   ├── table: default.join_reorder.t
│   ├── read rows: 1
│   ├── read bytes: 31
│   ├── partitions total: 1
│   ├── partitions scanned: 1
│   └── push downs: [filters: [], limit: NONE]
└── TableScan(Probe)
    ├── table: default.join_reorder.t1
    ├── read rows: 10
    ├── read bytes: 68
    ├── partitions total: 1
    ├── partitions scanned: 1
    └── push downs: [filters: [], limit: NONE]

statement query T
explain select * from t right semi join t1 on t1.a = t.a;

----
HashJoin
├── join type: LEFT SEMI
├── build keys: [t.a (#0)]
├── probe keys: [t1.a (#1)]
├── filters: []
├── TableScan(Build)
│   ├── table: default.join_reorder.t
│   ├── read rows: 1
│   ├── read bytes: 31
│   ├── partitions total: 1
│   ├── partitions scanned: 1
│   └── push downs: [filters: [], limit: NONE]
└── TableScan(Probe)
    ├── table: default.join_reorder.t1
    ├── read rows: 10
    ├── read bytes: 68
    ├── partitions total: 1
    ├── partitions scanned: 1
    └── push downs: [filters: [], limit: NONE]

statement query T
explain select * from t left anti join t1 on t1.a = t.a;

----
HashJoin
├── join type: RIGHT ANTI
├── build keys: [t.a (#0)]
├── probe keys: [t1.a (#1)]
├── filters: []
├── TableScan(Build)
│   ├── table: default.join_reorder.t
│   ├── read rows: 1
│   ├── read bytes: 31
│   ├── partitions total: 1
│   ├── partitions scanned: 1
│   └── push downs: [filters: [], limit: NONE]
└── TableScan(Probe)
    ├── table: default.join_reorder.t1
    ├── read rows: 10
    ├── read bytes: 68
    ├── partitions total: 1
    ├── partitions scanned: 1
    └── push downs: [filters: [], limit: NONE]

statement query T
explain select * from t right anti join t1 on t1.a = t.a;

----
HashJoin
├── join type: LEFT ANTI
├── build keys: [t.a (#0)]
├── probe keys: [t1.a (#1)]
├── filters: []
├── TableScan(Build)
│   ├── table: default.join_reorder.t
│   ├── read rows: 1
│   ├── read bytes: 31
│   ├── partitions total: 1
│   ├── partitions scanned: 1
│   └── push downs: [filters: [], limit: NONE]
└── TableScan(Probe)
    ├── table: default.join_reorder.t1
    ├── read rows: 10
    ├── read bytes: 68
    ├── partitions total: 1
    ├── partitions scanned: 1
    └── push downs: [filters: [], limit: NONE]

statement ok
drop database join_reorder;


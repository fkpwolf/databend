statement query T
explain select * from (select a from (select number as a, number + 1 as b from numbers(1)));

----
TableScan
├── table: default.system.numbers
├── read rows: 1
├── read bytes: 8
├── partitions total: 1
├── partitions scanned: 1
└── push downs: [filters: [], limit: NONE]

statement query T
explain select a from (select number as a, count(*) as b from numbers(1) group by a);

----
AggregateFinal
├── group by: [number]
├── aggregate functions: []
└── AggregatePartial
    ├── group by: [number]
    ├── aggregate functions: []
    └── TableScan
        ├── table: default.system.numbers
        ├── read rows: 1
        ├── read bytes: 8
        ├── partitions total: 1
        ├── partitions scanned: 1
        └── push downs: [filters: [], limit: NONE]

statement query T
explain select a from (select number as a, number b, sum(number) as c, number as d, number as e from numbers(1) group by a, b, d, e) where b > 1 order by d limit 1;

----
Limit
├── limit: 1
├── offset: 0
└── Sort
    ├── sort keys: [number ASC NULLS LAST]
    └── Filter
        ├── filters: [>(numbers.b (#0), 1)]
        └── AggregateFinal
            ├── group by: [number, number, number, number]
            ├── aggregate functions: []
            └── AggregatePartial
                ├── group by: [number, number, number, number]
                ├── aggregate functions: []
                └── TableScan
                    ├── table: default.system.numbers
                    ├── read rows: 1
                    ├── read bytes: 8
                    ├── partitions total: 1
                    ├── partitions scanned: 1
                    └── push downs: [filters: [], limit: NONE]

statement query T
explain select * from (select t1.a from (select number + 1 as a, number + 1 as b, number + 1 as c, number + 1 as d from numbers(1)) as t1, (select number + 1 as a, number + 1 as b, number + 1 as c from numbers(1)) as t2 where t1.b = t2.b and t1.c = 1);

----
HashJoin
├── join type: INNER
├── build keys: [t2.b (#11)]
├── probe keys: [t1.b (#2)]
├── filters: []
├── EvalScalar(Build)
│   ├── expressions: [+(numbers.number (#9), 1)]
│   └── TableScan
│       ├── table: default.system.numbers
│       ├── read rows: 1
│       ├── read bytes: 8
│       ├── partitions total: 1
│       ├── partitions scanned: 1
│       └── push downs: [filters: [], limit: NONE]
└── Filter(Probe)
    ├── filters: [=(t1.c (#3), 1)]
    └── EvalScalar
        ├── expressions: [+(numbers.number (#0), 1), +(numbers.number (#0), 1), +(numbers.number (#0), 1)]
        └── TableScan
            ├── table: default.system.numbers
            ├── read rows: 1
            ├── read bytes: 8
            ├── partitions total: 1
            ├── partitions scanned: 1
            └── push downs: [filters: [], limit: NONE]

statement query T
explain select t1.a from (select number + 1 as a, number + 1 as b from numbers(1)) as t1 where t1.a = (select count(*) from (select t2.a, t3.a from (select number + 1 as a, number + 1 as b, number + 1 as c, number + 1 as d from numbers(1)) as t2, (select number + 1 as a, number + 1 as b, number + 1 as c from numbers(1)) as t3 where t2.b = t3.b and t2.c = 1));

----
Filter
├── filters: [=(t1.a (#1), scalar_subquery_21 (#21))]
└── HashJoin
    ├── join type: SINGLE
    ├── build keys: []
    ├── probe keys: []
    ├── filters: []
    ├── EvalScalar(Build)
    │   ├── expressions: [COUNT(*) (#22)]
    │   └── AggregateFinal
    │       ├── group by: []
    │       ├── aggregate functions: [count()]
    │       └── AggregatePartial
    │           ├── group by: []
    │           ├── aggregate functions: [count()]
    │           └── HashJoin
    │               ├── join type: INNER
    │               ├── build keys: [t3.b (#16)]
    │               ├── probe keys: [t2.b (#7)]
    │               ├── filters: []
    │               ├── EvalScalar(Build)
    │               │   ├── expressions: [+(numbers.number (#14), 1)]
    │               │   └── TableScan
    │               │       ├── table: default.system.numbers
    │               │       ├── read rows: 1
    │               │       ├── read bytes: 8
    │               │       ├── partitions total: 1
    │               │       ├── partitions scanned: 1
    │               │       └── push downs: [filters: [], limit: NONE]
    │               └── Filter(Probe)
    │                   ├── filters: [=(t2.c (#8), 1)]
    │                   └── EvalScalar
    │                       ├── expressions: [+(numbers.number (#5), 1), +(numbers.number (#5), 1)]
    │                       └── TableScan
    │                           ├── table: default.system.numbers
    │                           ├── read rows: 1
    │                           ├── read bytes: 8
    │                           ├── partitions total: 1
    │                           ├── partitions scanned: 1
    │                           └── push downs: [filters: [], limit: NONE]
    └── EvalScalar(Probe)
        ├── expressions: [+(numbers.number (#0), 1)]
        └── TableScan
            ├── table: default.system.numbers
            ├── read rows: 1
            ├── read bytes: 8
            ├── partitions total: 1
            ├── partitions scanned: 1
            └── push downs: [filters: [], limit: NONE]

statement query T
explain select name from system.functions order by example;

----
Sort
├── sort keys: [example ASC NULLS LAST]
└── TableScan
    ├── table: default.system.functions
    ├── read rows: 0
    ├── read bytes: 0
    ├── partitions total: 0
    ├── partitions scanned: 0
    └── push downs: [filters: [], limit: NONE]

statement query T
explain select t.number from numbers(10) t where exists(select * from numbers(10));

----
HashJoin
├── join type: CROSS
├── build keys: []
├── probe keys: []
├── filters: []
├── Filter(Build)
│   ├── filters: [=(count(*) (#2), 1)]
│   └── AggregateFinal
│       ├── group by: []
│       ├── aggregate functions: [count()]
│       └── AggregatePartial
│           ├── group by: []
│           ├── aggregate functions: [count()]
│           └── Limit
│               ├── limit: 1
│               ├── offset: 0
│               └── TableScan
│                   ├── table: default.system.numbers
│                   ├── read rows: 1
│                   ├── read bytes: 8
│                   ├── partitions total: 1
│                   ├── partitions scanned: 1
│                   └── push downs: [filters: [], limit: 1]
└── TableScan(Probe)
    ├── table: default.system.numbers
    ├── read rows: 10
    ├── read bytes: 80
    ├── partitions total: 1
    ├── partitions scanned: 1
    └── push downs: [filters: [], limit: NONE]


statement ok
drop table if exists t;

statement ok
create table t(a int, b int);

statement ok
insert into t values(1, 2), (2, 3);

statement query T
explain select count(*) from t where t.b = 2;

----
EvalScalar
├── expressions: [COUNT(*) (#3)]
└── AggregateFinal
    ├── group by: []
    ├── aggregate functions: [count()]
    └── AggregatePartial
        ├── group by: []
        ├── aggregate functions: [count()]
        └── TableScan
            ├── table: default.default.t
            ├── read rows: 2
            ├── read bytes: 31
            ├── partitions total: 1
            ├── partitions scanned: 1
            └── push downs: [filters: [(b = 2)], limit: NONE]

statement ok
drop table t;


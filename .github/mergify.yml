queue_rules:
  - name: shared_queue
    merge_method: squash
    conditions:
      - "#approved-reviews-by>=2"

      # Must write expected checks explicitly
      # Reference: https://docs.mergify.com/conditions/#validating-all-status-checks
      # We only require linux checks to pass
      - check-success=check
      - check-success=build_aarch64_musl
      - check-success=build_x86_64_musl
      - check-success=test_unit
      - check-success=test_metactl
      - check-success=test_compat
      - check-success=test_compat_fuse
      # state tests
      - check-success=test_stateless_standalone
      - check-success=test_stateless_cluster
      - check-success=test_stateful_standalone
      - check-success=test_stateful_cluster
      # sqllogic standalone tests
      - check-success=sqllogic_standalone_base_parquet
      - check-success=sqllogic_standalone_base_native
      - check-success=sqllogic_standalone_ydb_parquet
      - check-success=sqllogic_standalone_ydb_native
      - check-success=sqllogic_standalone_query
      - check-success=sqllogic_standalone_standalone
      - check-success=sqllogic_standalone_crdb
      - check-success=sqllogic_standalone_duckdb
      # sqllogic cluster tests
      - check-success=sqllogic_cluster_base
      - check-success=sqllogic_cluster_query
      - check-success=sqllogic_cluster_cluster
      - check-success=sqllogic_cluster_ydb
      - check-success=sqllogic_cluster_crdb
      - check-success=sqllogic_cluster_duckdb

  - name: docs_queue
    merge_method: squash
    conditions:
      - "#approved-reviews-by>=1"

      # Docs queue only requires Vercel passing.
      - check-success=Vercel

  - name: rfc_queue
    merge_method: squash
    conditions:
      - "#approved-reviews-by>=3"

      # RFC queue only requires Vercel passing.
      - check-success=Vercel

pull_request_rules:
  # Push PR into queue when it passes all checks
  - name: Put into shared queue
    conditions:
      - "#approved-reviews-by>=2"
      - -draft
      - label!=pr-doc
      - label!=pr-rfc
    actions:
      queue:
        name: shared_queue

    # Push rfc PR into docs queue
  - name: Put into rfc queue
    conditions:
      - "#approved-reviews-by>=3"
      - -draft
      - label=pr-rfc
      - check-success=Vercel
    actions:
      queue:
        name: rfc_queue

  # Push docs PR into docs queue
  - name: Put into docs queue
    conditions:
      - "#approved-reviews-by>=1"
      - -draft
      - label=pr-doc
      - check-success=Vercel
    actions:
      queue:
        name: docs_queue

  # Check if PR has conflicts for merging
  - name: Check PR conflicts
    conditions:
      - -conflict
    actions:
      post_check:
        title: |
          {% if check_succeed %}
          PR doesn't have conflicts
          {% else %}
          PR has conflicts
          {% endif %}
        summary: |
          {% if not check_succeed %}
          Pull request has merge conflicts that must be resolved before it can be merged, please update it 🙏.
          {% endif %}

  # Check if PR description contains CLA
  - name: Check PR description
    conditions:
      - author!=Mergify
      - -draft
      - '-body~=I hereby agree to the terms of the CLA available at: https:\/\/databend\.rs\/dev\/policies\/cla\/'
      - "-body~=Summary"
    actions:
      comment:
        message: |
          This pull request's description is not fulfill the requirements. @{{author}} please update it 🙏.

          The description should contain the following:

          ```
          I hereby agree to the terms of the CLA available at: https://databend.rs/dev/policies/cla/

          ## Summary

          Summary about this PR

          Close #issue
          ```

  # Check if PR description contain CLA
  - name: CLA Check
    conditions:
      - or:
          - author=Mergify
          - and:
              - 'body~=I hereby agree to the terms of the CLA available at: https:\/\/databend\.rs\/dev\/policies\/cla\/'
              - "body~=Summary"
    actions:
      post_check:
        title: |
          {% if check_succeed %}
          Description contains CLA
          {% else %}
          Description doesn't contain CLA
          {% endif %}
        summary: |
          {% if not check_succeed %}
          Pull request description must contain [CLA](https://databend.rs/doc/contributing/good-pr) like the following:

          ```
          I hereby agree to the terms of the CLA available at: https://databend.rs/dev/policies/cla/

          ## Summary

          Summary about this PR

          Close #issue
          ```
          {% endif %}

  # Check if PR title contain valid types
  - name: Comment PR if title not semantic
    conditions:
      - author!=Mergify
      - -draft
      - '-title~=^(rfc|feat|fix|refactor|ci|docs|chore)(\(.*\))?:'
    actions:
      comment:
        message: |
          This pull request's title is not fulfill the requirements. @{{author}} please update it 🙏.

          Valid format:

          ```
          fix(query): fix group by string bug
            ^         ^---------------------^
            |         |
            |         +-> Summary in present tense.
            |
            +-------> Type: rfc, feat, fix, refactor, ci, docs, chore
          ```

          Valid types:

          - `rfc`: this PR proposes a new RFC
          - `feat`: this PR introduces a new feature to the codebase
          - `fix`: this PR patches a bug in codebase
          - `refactor`: this PR changes the code base without new features or bugfix
          - `ci`: this PR changes build/testing/ci steps
          - `docs`: this PR changes the documents or websites
          - `chore`: this PR only has small changes that no need to record

  # Check if PR title contain valid types
  - name: Semantic PR Check
    conditions:
      - or:
          - author=Mergify
          - 'title~=^(rfc|feat|fix|refactor|ci|docs|chore)(\(.*\))?:'
    actions:
      post_check:
        title: |
          {% if check_succeed %}
          Title follows Semantic PR
          {% else %}
          Title does not follow Semantic PR
          {% endif %}
        summary: |
          {% if not check_succeed %}
          Pull request title must follow [Semantic PR](https://databend.rs/doc/contributing/good-pr)

          Valid format:

          ```
          fix(query): fix group by string bug
            ^         ^---------------------^
            |         |
            |         +-> Summary in present tense.
            |
            +-------> Type: feat, fix, refactor, ci, docs, chore
          ```

          Valid types:

          - `rfc`: this PR proposes a new RFC
          - `feat`: this PR introduces a new feature to the codebase
          - `fix`: this PR patches a bug in codebase
          - `refactor`: this PR changes the code base without new features or bugfix
          - `ci`: this PR changes build/testing/ci steps
          - `docs`: this PR changes the documents or websites
          - `chore`: this PR only has small changes that no need to record
          {% endif %}

  # Assign pr label based of tags
  - name: label on RFCs
    conditions:
      - 'title~=^(rfc)(\(.*\))?:'
    actions:
      label:
        add:
          - pr-rfc
  - name: label on New Feature
    conditions:
      - 'title~=^(feat)(\(.*\))?:'
    actions:
      label:
        add:
          - pr-feature
  - name: label on Bug Fix
    conditions:
      - 'title~=^(fix)(\(.*\))?:'
    actions:
      label:
        add:
          - pr-bugfix
  - name: label on Refactor
    conditions:
      - 'title~=^(refactor)(\(.*\))?:'
    actions:
      label:
        add:
          - pr-refactor
  - name: label on Build/Testing/CI
    conditions:
      - 'title~=^(ci)(\(.*\))?:'
    actions:
      label:
        add:
          - pr-build
  - name: label on Documentation
    conditions:
      - 'title~=^(docs)(\(.*\))?:'
    actions:
      label:
        add:
          - pr-doc
  - name: label on Not for changelog
    conditions:
      - 'title~=^(chore)(\(.*\))?:'
    actions:
      label:
        add:
          - pr-chore
